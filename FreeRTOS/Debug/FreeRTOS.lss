
FreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001e20  00001eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006bc  00800066  00800066  00001eba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000524c  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001438  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034d9  00000000  00000000  00008a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de8  00000000  00000000  0000bf38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019c4  00000000  00000000  0000cd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d05  00000000  00000000  0000e6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  000133e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 0c 	call	0x195a	; 0x195a <main>
      8a:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_BUFFER_STORE>:
			sprintf(string_data,"T=%d",ADC_BUFF);
			LCD_WRITE_STRING(string_data);
		}
		vTaskDelay(20);
		ADC_START_COV();
	}
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	20 e0       	ldi	r18, 0x00	; 0
      98:	40 e0       	ldi	r20, 0x00	; 0
      9a:	50 e0       	ldi	r21, 0x00	; 0
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	70 e0       	ldi	r23, 0x00	; 0
      a0:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xUartSemaphore>
      a4:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <xUartSemaphore+0x1>
      a8:	0e 94 66 05 	call	0xacc	; 0xacc <xQueueGenericSend>
      ac:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UART_BUFF_COUNT>
      b0:	e8 2f       	mov	r30, r24
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	e6 54       	subi	r30, 0x46	; 70
      b6:	f9 4f       	sbci	r31, 0xF9	; 249
      b8:	c0 83       	st	Z, r28
      ba:	8f 5f       	subi	r24, 0xFF	; 255
      bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <UART_BUFF_COUNT>
      c0:	cf 91       	pop	r28
      c2:	08 95       	ret

000000c4 <ADC_READ_WITH_INT>:
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	ec 01       	movw	r28, r24
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	40 e0       	ldi	r20, 0x00	; 0
      ce:	50 e0       	ldi	r21, 0x00	; 0
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	70 e0       	ldi	r23, 0x00	; 0
      d4:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xADCSemaphore>
      d8:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <xADCSemaphore+0x1>
      dc:	0e 94 66 05 	call	0xacc	; 0xacc <xQueueGenericSend>
      e0:	24 ef       	ldi	r18, 0xF4	; 244
      e2:	31 e0       	ldi	r19, 0x01	; 1
      e4:	c2 9f       	mul	r28, r18
      e6:	c0 01       	movw	r24, r0
      e8:	c3 9f       	mul	r28, r19
      ea:	90 0d       	add	r25, r0
      ec:	d2 9f       	mul	r29, r18
      ee:	90 0d       	add	r25, r0
      f0:	11 24       	eor	r1, r1
      f2:	6f ef       	ldi	r22, 0xFF	; 255
      f4:	73 e0       	ldi	r23, 0x03	; 3
      f6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__udivmodhi4>
      fa:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x1>
      fe:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end>
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <Lcd_Read_Uart_Task_Semaphore>:
     108:	62 e0       	ldi	r22, 0x02	; 2
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xUartSemaphore>
     110:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <xUartSemaphore+0x1>
     114:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueSemaphoreTake>
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	89 f4       	brne	.+34     	; 0x13e <Lcd_Read_Uart_Task_Semaphore+0x36>
     11c:	09 c0       	rjmp	.+18     	; 0x130 <Lcd_Read_Uart_Task_Semaphore+0x28>
     11e:	ec 2f       	mov	r30, r28
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	e6 54       	subi	r30, 0x46	; 70
     124:	f9 4f       	sbci	r31, 0xF9	; 249
     126:	80 81       	ld	r24, Z
     128:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_WRITE_CHAR>
     12c:	cf 5f       	subi	r28, 0xFF	; 255
     12e:	01 c0       	rjmp	.+2      	; 0x132 <Lcd_Read_Uart_Task_Semaphore+0x2a>
     130:	c0 e0       	ldi	r28, 0x00	; 0
     132:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <UART_BUFF_COUNT>
     136:	c8 17       	cp	r28, r24
     138:	90 f3       	brcs	.-28     	; 0x11e <Lcd_Read_Uart_Task_Semaphore+0x16>
     13a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <UART_BUFF_COUNT>
     13e:	88 ee       	ldi	r24, 0xE8	; 232
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	0e 94 aa 0a 	call	0x1554	; 0x1554 <vTaskDelay>
     146:	e0 cf       	rjmp	.-64     	; 0x108 <Lcd_Read_Uart_Task_Semaphore>

00000148 <INIT>:
uint16 ADC_BUFF = 0;
//creating ADC semaphore variable
SemaphoreHandle_t xADCSemaphore;
void INIT(){
	//DIO INIT
	DIO_vSetPinDirection(PORT_A,PIN0,OUTPUT);
     148:	42 e0       	ldi	r20, 0x02	; 2
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_A,PIN1,OUTPUT);
     152:	42 e0       	ldi	r20, 0x02	; 2
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_A,PIN2,OUTPUT);
     15c:	42 e0       	ldi	r20, 0x02	; 2
     15e:	62 e0       	ldi	r22, 0x02	; 2
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_C,PIN0,OUTPUT);
     166:	42 e0       	ldi	r20, 0x02	; 2
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_C,PIN1,OUTPUT);
     170:	42 e0       	ldi	r20, 0x02	; 2
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	DIO_vWritePin(PORT_A,PIN0,LOW);
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	DIO_vWritePin(PORT_A,PIN1,LOW);
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	DIO_vWritePin(PORT_A,PIN2,LOW);
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	62 e0       	ldi	r22, 0x02	; 2
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	DIO_vWritePin(PORT_C,PIN0,LOW);
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	DIO_vWritePin(PORT_C,PIN1,LOW);
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	//LCD INIT
	LCD_INIT();
     1ac:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_INIT>
	//|UART set callback
	Uart_set_callback(UART_BUFFER_STORE);
     1b0:	89 e4       	ldi	r24, 0x49	; 73
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Uart_set_callback>
	//UART init
	UART_INIT();
     1b8:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_INIT>
	//ADC callback
	ADC_Set_Callback(ADC_READ_WITH_INT);
     1bc:	82 e6       	ldi	r24, 0x62	; 98
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <ADC_Set_Callback>
	//ADC INIT
	ADC_INIT(0);
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <ADC_INIT>
     1ca:	08 95       	ret

000001cc <Create_Semaphore_Task_Uart>:
		vTaskDelay(20);
		ADC_START_COV();
	}
}

void Create_Semaphore_Task_Uart(void){
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
	//creating the counting semaphore with 102 count all taken 
	xUartSemaphore = xSemaphoreCreateCounting(102,0);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	86 e6       	ldi	r24, 0x66	; 102
     1d6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <xQueueCreateCountingSemaphore>
     1da:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <xUartSemaphore+0x1>
     1de:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <xUartSemaphore>
	//creating the task 
	xTaskCreate(Lcd_Read_Uart_Task_Semaphore,NULL,250,NULL,1,NULL);
     1e2:	e1 2c       	mov	r14, r1
     1e4:	f1 2c       	mov	r15, r1
     1e6:	01 e0       	ldi	r16, 0x01	; 1
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	4a ef       	ldi	r20, 0xFA	; 250
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	84 e8       	ldi	r24, 0x84	; 132
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 30 08 	call	0x1060	; 0x1060 <xTaskCreate>
	
}
     1fc:	0f 91       	pop	r16
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	08 95       	ret

00000204 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     204:	fc 01       	movw	r30, r24
     206:	03 96       	adiw	r24, 0x03	; 3
     208:	92 83       	std	Z+2, r25	; 0x02
     20a:	81 83       	std	Z+1, r24	; 0x01
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	3f ef       	ldi	r19, 0xFF	; 255
     210:	34 83       	std	Z+4, r19	; 0x04
     212:	23 83       	std	Z+3, r18	; 0x03
     214:	96 83       	std	Z+6, r25	; 0x06
     216:	85 83       	std	Z+5, r24	; 0x05
     218:	90 87       	std	Z+8, r25	; 0x08
     21a:	87 83       	std	Z+7, r24	; 0x07
     21c:	10 82       	st	Z, r1
     21e:	08 95       	ret

00000220 <vListInitialiseItem>:
     220:	fc 01       	movw	r30, r24
     222:	11 86       	std	Z+9, r1	; 0x09
     224:	10 86       	std	Z+8, r1	; 0x08
     226:	08 95       	ret

00000228 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     22e:	48 81       	ld	r20, Y
     230:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     232:	4f 3f       	cpi	r20, 0xFF	; 255
     234:	2f ef       	ldi	r18, 0xFF	; 255
     236:	52 07       	cpc	r21, r18
     238:	21 f4       	brne	.+8      	; 0x242 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     23a:	fc 01       	movw	r30, r24
     23c:	a7 81       	ldd	r26, Z+7	; 0x07
     23e:	b0 85       	ldd	r27, Z+8	; 0x08
     240:	0d c0       	rjmp	.+26     	; 0x25c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     242:	dc 01       	movw	r26, r24
     244:	13 96       	adiw	r26, 0x03	; 3
     246:	01 c0       	rjmp	.+2      	; 0x24a <vListInsert+0x22>
     248:	df 01       	movw	r26, r30
     24a:	12 96       	adiw	r26, 0x02	; 2
     24c:	ed 91       	ld	r30, X+
     24e:	fc 91       	ld	r31, X
     250:	13 97       	sbiw	r26, 0x03	; 3
     252:	20 81       	ld	r18, Z
     254:	31 81       	ldd	r19, Z+1	; 0x01
     256:	42 17       	cp	r20, r18
     258:	53 07       	cpc	r21, r19
     25a:	b0 f7       	brcc	.-20     	; 0x248 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     25c:	12 96       	adiw	r26, 0x02	; 2
     25e:	ed 91       	ld	r30, X+
     260:	fc 91       	ld	r31, X
     262:	13 97       	sbiw	r26, 0x03	; 3
     264:	fb 83       	std	Y+3, r31	; 0x03
     266:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     268:	d5 83       	std	Z+5, r29	; 0x05
     26a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     26c:	bd 83       	std	Y+5, r27	; 0x05
     26e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     270:	13 96       	adiw	r26, 0x03	; 3
     272:	dc 93       	st	X, r29
     274:	ce 93       	st	-X, r28
     276:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     278:	99 87       	std	Y+9, r25	; 0x09
     27a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     27c:	fc 01       	movw	r30, r24
     27e:	20 81       	ld	r18, Z
     280:	2f 5f       	subi	r18, 0xFF	; 255
     282:	20 83       	st	Z, r18
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     290:	a0 85       	ldd	r26, Z+8	; 0x08
     292:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     294:	c2 81       	ldd	r28, Z+2	; 0x02
     296:	d3 81       	ldd	r29, Z+3	; 0x03
     298:	84 81       	ldd	r24, Z+4	; 0x04
     29a:	95 81       	ldd	r25, Z+5	; 0x05
     29c:	9d 83       	std	Y+5, r25	; 0x05
     29e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     2a0:	c4 81       	ldd	r28, Z+4	; 0x04
     2a2:	d5 81       	ldd	r29, Z+5	; 0x05
     2a4:	82 81       	ldd	r24, Z+2	; 0x02
     2a6:	93 81       	ldd	r25, Z+3	; 0x03
     2a8:	9b 83       	std	Y+3, r25	; 0x03
     2aa:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     2ac:	11 96       	adiw	r26, 0x01	; 1
     2ae:	8d 91       	ld	r24, X+
     2b0:	9c 91       	ld	r25, X
     2b2:	12 97       	sbiw	r26, 0x02	; 2
     2b4:	e8 17       	cp	r30, r24
     2b6:	f9 07       	cpc	r31, r25
     2b8:	31 f4       	brne	.+12     	; 0x2c6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     2ba:	84 81       	ldd	r24, Z+4	; 0x04
     2bc:	95 81       	ldd	r25, Z+5	; 0x05
     2be:	12 96       	adiw	r26, 0x02	; 2
     2c0:	9c 93       	st	X, r25
     2c2:	8e 93       	st	-X, r24
     2c4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     2c6:	11 86       	std	Z+9, r1	; 0x09
     2c8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     2ca:	8c 91       	ld	r24, X
     2cc:	81 50       	subi	r24, 0x01	; 1
     2ce:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     2d0:	8c 91       	ld	r24, X
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     2d8:	1b bc       	out	0x2b, r1	; 43
     2da:	89 ef       	ldi	r24, 0xF9	; 249
     2dc:	8a bd       	out	0x2a, r24	; 42
     2de:	8b e0       	ldi	r24, 0x0B	; 11
     2e0:	8e bd       	out	0x2e, r24	; 46
     2e2:	89 b7       	in	r24, 0x39	; 57
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	89 bf       	out	0x39, r24	; 57
     2e8:	08 95       	ret

000002ea <pxPortInitialiseStack>:
     2ea:	31 e1       	ldi	r19, 0x11	; 17
     2ec:	fc 01       	movw	r30, r24
     2ee:	30 83       	st	Z, r19
     2f0:	31 97       	sbiw	r30, 0x01	; 1
     2f2:	22 e2       	ldi	r18, 0x22	; 34
     2f4:	20 83       	st	Z, r18
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	a3 e3       	ldi	r26, 0x33	; 51
     2fa:	a0 83       	st	Z, r26
     2fc:	31 97       	sbiw	r30, 0x01	; 1
     2fe:	60 83       	st	Z, r22
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	70 83       	st	Z, r23
     304:	31 97       	sbiw	r30, 0x01	; 1
     306:	10 82       	st	Z, r1
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	60 e8       	ldi	r22, 0x80	; 128
     30c:	60 83       	st	Z, r22
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	10 82       	st	Z, r1
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	62 e0       	ldi	r22, 0x02	; 2
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	63 e0       	ldi	r22, 0x03	; 3
     31c:	60 83       	st	Z, r22
     31e:	31 97       	sbiw	r30, 0x01	; 1
     320:	64 e0       	ldi	r22, 0x04	; 4
     322:	60 83       	st	Z, r22
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	65 e0       	ldi	r22, 0x05	; 5
     328:	60 83       	st	Z, r22
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	66 e0       	ldi	r22, 0x06	; 6
     32e:	60 83       	st	Z, r22
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	67 e0       	ldi	r22, 0x07	; 7
     334:	60 83       	st	Z, r22
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	68 e0       	ldi	r22, 0x08	; 8
     33a:	60 83       	st	Z, r22
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	69 e0       	ldi	r22, 0x09	; 9
     340:	60 83       	st	Z, r22
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	60 e1       	ldi	r22, 0x10	; 16
     346:	60 83       	st	Z, r22
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	30 83       	st	Z, r19
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	32 e1       	ldi	r19, 0x12	; 18
     350:	30 83       	st	Z, r19
     352:	31 97       	sbiw	r30, 0x01	; 1
     354:	33 e1       	ldi	r19, 0x13	; 19
     356:	30 83       	st	Z, r19
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	34 e1       	ldi	r19, 0x14	; 20
     35c:	30 83       	st	Z, r19
     35e:	31 97       	sbiw	r30, 0x01	; 1
     360:	35 e1       	ldi	r19, 0x15	; 21
     362:	30 83       	st	Z, r19
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	36 e1       	ldi	r19, 0x16	; 22
     368:	30 83       	st	Z, r19
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	37 e1       	ldi	r19, 0x17	; 23
     36e:	30 83       	st	Z, r19
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	38 e1       	ldi	r19, 0x18	; 24
     374:	30 83       	st	Z, r19
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	39 e1       	ldi	r19, 0x19	; 25
     37a:	30 83       	st	Z, r19
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	30 e2       	ldi	r19, 0x20	; 32
     380:	30 83       	st	Z, r19
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	31 e2       	ldi	r19, 0x21	; 33
     386:	30 83       	st	Z, r19
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	20 83       	st	Z, r18
     38c:	31 97       	sbiw	r30, 0x01	; 1
     38e:	23 e2       	ldi	r18, 0x23	; 35
     390:	20 83       	st	Z, r18
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	40 83       	st	Z, r20
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	50 83       	st	Z, r21
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	26 e2       	ldi	r18, 0x26	; 38
     39e:	20 83       	st	Z, r18
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	27 e2       	ldi	r18, 0x27	; 39
     3a4:	20 83       	st	Z, r18
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	28 e2       	ldi	r18, 0x28	; 40
     3aa:	20 83       	st	Z, r18
     3ac:	31 97       	sbiw	r30, 0x01	; 1
     3ae:	29 e2       	ldi	r18, 0x29	; 41
     3b0:	20 83       	st	Z, r18
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	20 e3       	ldi	r18, 0x30	; 48
     3b6:	20 83       	st	Z, r18
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	21 e3       	ldi	r18, 0x31	; 49
     3bc:	20 83       	st	Z, r18
     3be:	86 97       	sbiw	r24, 0x26	; 38
     3c0:	08 95       	ret

000003c2 <xPortStartScheduler>:
     3c2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <prvSetupTimerInterrupt>
     3c6:	a0 91 af 06 	lds	r26, 0x06AF	; 0x8006af <pxCurrentTCB>
     3ca:	b0 91 b0 06 	lds	r27, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     3ce:	cd 91       	ld	r28, X+
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	dd 91       	ld	r29, X+
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	bf 90       	pop	r11
     400:	af 90       	pop	r10
     402:	9f 90       	pop	r9
     404:	8f 90       	pop	r8
     406:	7f 90       	pop	r7
     408:	6f 90       	pop	r6
     40a:	5f 90       	pop	r5
     40c:	4f 90       	pop	r4
     40e:	3f 90       	pop	r3
     410:	2f 90       	pop	r2
     412:	1f 90       	pop	r1
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	08 95       	ret
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	08 95       	ret

00000420 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	0f 92       	push	r0
     428:	1f 92       	push	r1
     42a:	11 24       	eor	r1, r1
     42c:	2f 92       	push	r2
     42e:	3f 92       	push	r3
     430:	4f 92       	push	r4
     432:	5f 92       	push	r5
     434:	6f 92       	push	r6
     436:	7f 92       	push	r7
     438:	8f 92       	push	r8
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ef 93       	push	r30
     466:	ff 93       	push	r31
     468:	a0 91 af 06 	lds	r26, 0x06AF	; 0x8006af <pxCurrentTCB>
     46c:	b0 91 b0 06 	lds	r27, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     470:	0d b6       	in	r0, 0x3d	; 61
     472:	0d 92       	st	X+, r0
     474:	0e b6       	in	r0, 0x3e	; 62
     476:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     478:	0e 94 c0 0a 	call	0x1580	; 0x1580 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     47c:	a0 91 af 06 	lds	r26, 0x06AF	; 0x8006af <pxCurrentTCB>
     480:	b0 91 b0 06 	lds	r27, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     484:	cd 91       	ld	r28, X+
     486:	cd bf       	out	0x3d, r28	; 61
     488:	dd 91       	ld	r29, X+
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	7f 90       	pop	r7
     4be:	6f 90       	pop	r6
     4c0:	5f 90       	pop	r5
     4c2:	4f 90       	pop	r4
     4c4:	3f 90       	pop	r3
     4c6:	2f 90       	pop	r2
     4c8:	1f 90       	pop	r1
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4d0:	08 95       	ret

000004d2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     4d2:	0f 92       	push	r0
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	0f 92       	push	r0
     4da:	1f 92       	push	r1
     4dc:	11 24       	eor	r1, r1
     4de:	2f 92       	push	r2
     4e0:	3f 92       	push	r3
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
     51a:	a0 91 af 06 	lds	r26, 0x06AF	; 0x8006af <pxCurrentTCB>
     51e:	b0 91 b0 06 	lds	r27, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     522:	0d b6       	in	r0, 0x3d	; 61
     524:	0d 92       	st	X+, r0
     526:	0e b6       	in	r0, 0x3e	; 62
     528:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     52a:	0e 94 bb 08 	call	0x1176	; 0x1176 <xTaskIncrementTick>
     52e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     530:	0e 94 c0 0a 	call	0x1580	; 0x1580 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     534:	a0 91 af 06 	lds	r26, 0x06AF	; 0x8006af <pxCurrentTCB>
     538:	b0 91 b0 06 	lds	r27, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     53c:	cd 91       	ld	r28, X+
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	dd 91       	ld	r29, X+
     542:	de bf       	out	0x3e, r29	; 62
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	9f 90       	pop	r9
     572:	8f 90       	pop	r8
     574:	7f 90       	pop	r7
     576:	6f 90       	pop	r6
     578:	5f 90       	pop	r5
     57a:	4f 90       	pop	r4
     57c:	3f 90       	pop	r3
     57e:	2f 90       	pop	r2
     580:	1f 90       	pop	r1
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0

	asm volatile ( "ret" );
     588:	08 95       	ret

0000058a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     58a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <vPortYieldFromTick>
		asm volatile ( "reti" );
     58e:	18 95       	reti

00000590 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     590:	e3 e7       	ldi	r30, 0x73	; 115
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	a7 e7       	ldi	r26, 0x77	; 119
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	b1 83       	std	Z+1, r27	; 0x01
     59a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     59c:	13 82       	std	Z+3, r1	; 0x03
     59e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     5a0:	ef e4       	ldi	r30, 0x4F	; 79
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( BlockLink_t * ) uxAddress;
     5a4:	f0 93 72 00 	sts	0x0072, r31	; 0x800072 <pxEnd+0x1>
     5a8:	e0 93 71 00 	sts	0x0071, r30	; 0x800071 <pxEnd>
    pxEnd->xBlockSize = 0;
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
     5b4:	88 ed       	ldi	r24, 0xD8	; 216
     5b6:	95 e0       	ldi	r25, 0x05	; 5
     5b8:	13 96       	adiw	r26, 0x03	; 3
     5ba:	9c 93       	st	X, r25
     5bc:	8e 93       	st	-X, r24
     5be:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5c0:	ed 93       	st	X+, r30
     5c2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5c4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <xMinimumEverFreeBytesRemaining+0x1>
     5c8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5cc:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <xFreeBytesRemaining+0x1>
     5d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <xFreeBytesRemaining>
     5d4:	08 95       	ret

000005d6 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     5dc:	a3 e7       	ldi	r26, 0x73	; 115
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <prvInsertBlockIntoFreeList+0xe>
     5e2:	df 01       	movw	r26, r30
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	11 97       	sbiw	r26, 0x01	; 1
     5ea:	ec 17       	cp	r30, r28
     5ec:	fd 07       	cpc	r31, r29
     5ee:	c8 f3       	brcs	.-14     	; 0x5e2 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     5f0:	12 96       	adiw	r26, 0x02	; 2
     5f2:	8d 91       	ld	r24, X+
     5f4:	9c 91       	ld	r25, X
     5f6:	13 97       	sbiw	r26, 0x03	; 3
     5f8:	9d 01       	movw	r18, r26
     5fa:	28 0f       	add	r18, r24
     5fc:	39 1f       	adc	r19, r25
     5fe:	c2 17       	cp	r28, r18
     600:	d3 07       	cpc	r29, r19
     602:	49 f4       	brne	.+18     	; 0x616 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     604:	2a 81       	ldd	r18, Y+2	; 0x02
     606:	3b 81       	ldd	r19, Y+3	; 0x03
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	13 96       	adiw	r26, 0x03	; 3
     60e:	9c 93       	st	X, r25
     610:	8e 93       	st	-X, r24
     612:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     614:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	9e 01       	movw	r18, r28
     61c:	28 0f       	add	r18, r24
     61e:	39 1f       	adc	r19, r25
     620:	e2 17       	cp	r30, r18
     622:	f3 07       	cpc	r31, r19
     624:	c1 f4       	brne	.+48     	; 0x656 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     626:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <pxEnd>
     62a:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <pxEnd+0x1>
     62e:	e2 17       	cp	r30, r18
     630:	f3 07       	cpc	r31, r19
     632:	71 f0       	breq	.+28     	; 0x650 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     634:	22 81       	ldd	r18, Z+2	; 0x02
     636:	33 81       	ldd	r19, Z+3	; 0x03
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	9b 83       	std	Y+3, r25	; 0x03
     63e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	99 83       	std	Y+1, r25	; 0x01
     64c:	88 83       	st	Y, r24
     64e:	05 c0       	rjmp	.+10     	; 0x65a <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     650:	39 83       	std	Y+1, r19	; 0x01
     652:	28 83       	st	Y, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     656:	f9 83       	std	Y+1, r31	; 0x01
     658:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     65a:	ca 17       	cp	r28, r26
     65c:	db 07       	cpc	r29, r27
     65e:	11 f0       	breq	.+4      	; 0x664 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     660:	cd 93       	st	X+, r28
     662:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	8c 01       	movw	r16, r24
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     678:	0e 94 b5 08 	call	0x116a	; 0x116a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     67c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pxEnd>
     680:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <pxEnd+0x1>
     684:	89 2b       	or	r24, r25
     686:	11 f4       	brne	.+4      	; 0x68c <pvPortMalloc+0x22>
        {
            prvHeapInit();
     688:	0e 94 c8 02 	call	0x590	; 0x590 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
     68c:	01 15       	cp	r16, r1
     68e:	11 05       	cpc	r17, r1
     690:	49 f0       	breq	.+18     	; 0x6a4 <pvPortMalloc+0x3a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     692:	0b 3f       	cpi	r16, 0xFB	; 251
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	18 07       	cpc	r17, r24
     698:	18 f4       	brcc	.+6      	; 0x6a0 <pvPortMalloc+0x36>
            {
                xWantedSize += xAdditionalRequiredSize;
     69a:	0b 5f       	subi	r16, 0xFB	; 251
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <pvPortMalloc+0x3a>
            }
            else
            {
                xWantedSize = 0;
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	10 e0       	ldi	r17, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     6a4:	11 23       	and	r17, r17
     6a6:	0c f4       	brge	.+2      	; 0x6aa <pvPortMalloc+0x40>
     6a8:	66 c0       	rjmp	.+204    	; 0x776 <pvPortMalloc+0x10c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     6aa:	01 15       	cp	r16, r1
     6ac:	11 05       	cpc	r17, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <pvPortMalloc+0x48>
     6b0:	65 c0       	rjmp	.+202    	; 0x77c <pvPortMalloc+0x112>
     6b2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <xFreeBytesRemaining>
     6b6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <xFreeBytesRemaining+0x1>
     6ba:	80 17       	cp	r24, r16
     6bc:	91 07       	cpc	r25, r17
     6be:	08 f4       	brcc	.+2      	; 0x6c2 <pvPortMalloc+0x58>
     6c0:	60 c0       	rjmp	.+192    	; 0x782 <pvPortMalloc+0x118>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     6c2:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <xStart>
     6c6:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     6ca:	e3 e7       	ldi	r30, 0x73	; 115
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <pvPortMalloc+0x6a>
                {
                    pxPreviousBlock = pxBlock;
     6d0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     6d2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	9b 81       	ldd	r25, Y+3	; 0x03
     6d8:	80 17       	cp	r24, r16
     6da:	91 07       	cpc	r25, r17
     6dc:	20 f4       	brcc	.+8      	; 0x6e6 <pvPortMalloc+0x7c>
     6de:	88 81       	ld	r24, Y
     6e0:	99 81       	ldd	r25, Y+1	; 0x01
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	a9 f7       	brne	.-22     	; 0x6d0 <pvPortMalloc+0x66>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     6e6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pxEnd>
     6ea:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <pxEnd+0x1>
     6ee:	c8 17       	cp	r28, r24
     6f0:	d9 07       	cpc	r29, r25
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <pvPortMalloc+0x8c>
     6f4:	49 c0       	rjmp	.+146    	; 0x788 <pvPortMalloc+0x11e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     6f6:	e0 80       	ld	r14, Z
     6f8:	f1 80       	ldd	r15, Z+1	; 0x01
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	e8 0e       	add	r14, r24
     6fe:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     700:	88 81       	ld	r24, Y
     702:	99 81       	ldd	r25, Y+1	; 0x01
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     708:	2a 81       	ldd	r18, Y+2	; 0x02
     70a:	3b 81       	ldd	r19, Y+3	; 0x03
     70c:	20 1b       	sub	r18, r16
     70e:	31 0b       	sbc	r19, r17
     710:	29 30       	cpi	r18, 0x09	; 9
     712:	31 05       	cpc	r19, r1
     714:	50 f0       	brcs	.+20     	; 0x72a <pvPortMalloc+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     716:	ce 01       	movw	r24, r28
     718:	80 0f       	add	r24, r16
     71a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     71c:	fc 01       	movw	r30, r24
     71e:	33 83       	std	Z+3, r19	; 0x03
     720:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     722:	1b 83       	std	Y+3, r17	; 0x03
     724:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     726:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     72a:	2a 81       	ldd	r18, Y+2	; 0x02
     72c:	3b 81       	ldd	r19, Y+3	; 0x03
     72e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <xFreeBytesRemaining>
     732:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <xFreeBytesRemaining+0x1>
     736:	82 1b       	sub	r24, r18
     738:	93 0b       	sbc	r25, r19
     73a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <xFreeBytesRemaining+0x1>
     73e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     742:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <xMinimumEverFreeBytesRemaining>
     746:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <xMinimumEverFreeBytesRemaining+0x1>
     74a:	84 17       	cp	r24, r20
     74c:	95 07       	cpc	r25, r21
     74e:	20 f4       	brcc	.+8      	; 0x758 <pvPortMalloc+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     750:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <xMinimumEverFreeBytesRemaining+0x1>
     754:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     758:	30 68       	ori	r19, 0x80	; 128
     75a:	3b 83       	std	Y+3, r19	; 0x03
     75c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     75e:	19 82       	std	Y+1, r1	; 0x01
     760:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     762:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <xNumberOfSuccessfulAllocations>
     766:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <xNumberOfSuccessfulAllocations+0x1>
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <xNumberOfSuccessfulAllocations+0x1>
     770:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <xNumberOfSuccessfulAllocations>
     774:	0b c0       	rjmp	.+22     	; 0x78c <pvPortMalloc+0x122>
void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
     776:	e1 2c       	mov	r14, r1
     778:	f1 2c       	mov	r15, r1
     77a:	08 c0       	rjmp	.+16     	; 0x78c <pvPortMalloc+0x122>
     77c:	e1 2c       	mov	r14, r1
     77e:	f1 2c       	mov	r15, r1
     780:	05 c0       	rjmp	.+10     	; 0x78c <pvPortMalloc+0x122>
     782:	e1 2c       	mov	r14, r1
     784:	f1 2c       	mov	r15, r1
     786:	02 c0       	rjmp	.+4      	; 0x78c <pvPortMalloc+0x122>
     788:	e1 2c       	mov	r14, r1
     78a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     78c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     790:	c7 01       	movw	r24, r14
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	49 f1       	breq	.+82     	; 0x7fe <vPortFree+0x5e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     7ac:	ec 01       	movw	r28, r24
     7ae:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     7b0:	2a 81       	ldd	r18, Y+2	; 0x02
     7b2:	3b 81       	ldd	r19, Y+3	; 0x03
     7b4:	33 23       	and	r19, r19
     7b6:	1c f5       	brge	.+70     	; 0x7fe <vPortFree+0x5e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     7b8:	48 81       	ld	r20, Y
     7ba:	59 81       	ldd	r21, Y+1	; 0x01
     7bc:	45 2b       	or	r20, r21
     7be:	f9 f4       	brne	.+62     	; 0x7fe <vPortFree+0x5e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     7c0:	3f 77       	andi	r19, 0x7F	; 127
     7c2:	3b 83       	std	Y+3, r19	; 0x03
     7c4:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
     7c6:	0e 94 b5 08 	call	0x116a	; 0x116a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <xFreeBytesRemaining>
     7d2:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <xFreeBytesRemaining+0x1>
     7d6:	82 0f       	add	r24, r18
     7d8:	93 1f       	adc	r25, r19
     7da:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <xFreeBytesRemaining+0x1>
     7de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     7e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <xNumberOfSuccessfulFrees>
     7ec:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <xNumberOfSuccessfulFrees+0x1>
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <xNumberOfSuccessfulFrees+0x1>
     7f6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     7fa:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	0f 92       	push	r0
     80e:	fc 01       	movw	r30, r24
     810:	82 8d       	ldd	r24, Z+26	; 0x1a
     812:	81 11       	cpse	r24, r1
     814:	02 c0       	rjmp	.+4      	; 0x81a <prvIsQueueEmpty+0x12>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	01 c0       	rjmp	.+2      	; 0x81c <prvIsQueueEmpty+0x14>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	08 95       	ret

00000822 <prvIsQueueFull>:
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	0f 92       	push	r0
     828:	fc 01       	movw	r30, r24
     82a:	22 8d       	ldd	r18, Z+26	; 0x1a
     82c:	83 8d       	ldd	r24, Z+27	; 0x1b
     82e:	28 13       	cpse	r18, r24
     830:	02 c0       	rjmp	.+4      	; 0x836 <prvIsQueueFull+0x14>
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	01 c0       	rjmp	.+2      	; 0x838 <prvIsQueueFull+0x16>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0f 90       	pop	r0
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	08 95       	ret

0000083e <prvCopyDataToQueue>:
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ec 01       	movw	r28, r24
     848:	04 2f       	mov	r16, r20
     84a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     84c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     84e:	44 23       	and	r20, r20
     850:	b9 f1       	breq	.+110    	; 0x8c0 <__stack+0x61>
     852:	01 11       	cpse	r16, r1
     854:	16 c0       	rjmp	.+44     	; 0x882 <__stack+0x23>
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <memcpy>
     860:	2c 8d       	ldd	r18, Y+28	; 0x1c
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	9b 81       	ldd	r25, Y+3	; 0x03
     866:	82 0f       	add	r24, r18
     868:	91 1d       	adc	r25, r1
     86a:	9b 83       	std	Y+3, r25	; 0x03
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	2c 81       	ldd	r18, Y+4	; 0x04
     870:	3d 81       	ldd	r19, Y+5	; 0x05
     872:	82 17       	cp	r24, r18
     874:	93 07       	cpc	r25, r19
     876:	20 f1       	brcs	.+72     	; 0x8c0 <__stack+0x61>
     878:	88 81       	ld	r24, Y
     87a:	99 81       	ldd	r25, Y+1	; 0x01
     87c:	9b 83       	std	Y+3, r25	; 0x03
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	1f c0       	rjmp	.+62     	; 0x8c0 <__stack+0x61>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <memcpy>
     88c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	91 95       	neg	r25
     892:	81 95       	neg	r24
     894:	91 09       	sbc	r25, r1
     896:	2e 81       	ldd	r18, Y+6	; 0x06
     898:	3f 81       	ldd	r19, Y+7	; 0x07
     89a:	28 0f       	add	r18, r24
     89c:	39 1f       	adc	r19, r25
     89e:	3f 83       	std	Y+7, r19	; 0x07
     8a0:	2e 83       	std	Y+6, r18	; 0x06
     8a2:	48 81       	ld	r20, Y
     8a4:	59 81       	ldd	r21, Y+1	; 0x01
     8a6:	24 17       	cp	r18, r20
     8a8:	35 07       	cpc	r19, r21
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <__stack+0x59>
     8ac:	2c 81       	ldd	r18, Y+4	; 0x04
     8ae:	3d 81       	ldd	r19, Y+5	; 0x05
     8b0:	82 0f       	add	r24, r18
     8b2:	93 1f       	adc	r25, r19
     8b4:	9f 83       	std	Y+7, r25	; 0x07
     8b6:	8e 83       	std	Y+6, r24	; 0x06
     8b8:	02 30       	cpi	r16, 0x02	; 2
     8ba:	11 f4       	brne	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	11 11       	cpse	r17, r1
     8be:	11 50       	subi	r17, 0x01	; 1
     8c0:	1f 5f       	subi	r17, 0xFF	; 255
     8c2:	1a 8f       	std	Y+26, r17	; 0x1a
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	08 95       	ret

000008d0 <prvUnlockQueue>:
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	0f 92       	push	r0
     8de:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <prvUnlockQueue+0x28>
     8e2:	89 89       	ldd	r24, Y+17	; 0x11
     8e4:	88 23       	and	r24, r24
     8e6:	51 f0       	breq	.+20     	; 0x8fc <prvUnlockQueue+0x2c>
     8e8:	ce 01       	movw	r24, r28
     8ea:	41 96       	adiw	r24, 0x11	; 17
     8ec:	0e 94 26 0b 	call	0x164c	; 0x164c <xTaskRemoveFromEventList>
     8f0:	81 11       	cpse	r24, r1
     8f2:	0e 94 20 0c 	call	0x1840	; 0x1840 <vTaskMissedYield>
     8f6:	11 50       	subi	r17, 0x01	; 1
     8f8:	11 16       	cp	r1, r17
     8fa:	9c f3       	brlt	.-26     	; 0x8e2 <prvUnlockQueue+0x12>
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	8e 8f       	std	Y+30, r24	; 0x1e
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	0f 92       	push	r0
     90a:	1d 8d       	ldd	r17, Y+29	; 0x1d
     90c:	0b c0       	rjmp	.+22     	; 0x924 <prvUnlockQueue+0x54>
     90e:	88 85       	ldd	r24, Y+8	; 0x08
     910:	88 23       	and	r24, r24
     912:	51 f0       	breq	.+20     	; 0x928 <prvUnlockQueue+0x58>
     914:	ce 01       	movw	r24, r28
     916:	08 96       	adiw	r24, 0x08	; 8
     918:	0e 94 26 0b 	call	0x164c	; 0x164c <xTaskRemoveFromEventList>
     91c:	81 11       	cpse	r24, r1
     91e:	0e 94 20 0c 	call	0x1840	; 0x1840 <vTaskMissedYield>
     922:	11 50       	subi	r17, 0x01	; 1
     924:	11 16       	cp	r1, r17
     926:	9c f3       	brlt	.-26     	; 0x90e <prvUnlockQueue+0x3e>
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	8d 8f       	std	Y+29, r24	; 0x1d
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	08 95       	ret

00000938 <xQueueGenericReset>:
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	fc 01       	movw	r30, r24
     942:	36 2f       	mov	r19, r22
     944:	89 2b       	or	r24, r25
     946:	09 f4       	brne	.+2      	; 0x94a <xQueueGenericReset+0x12>
     948:	4d c0       	rjmp	.+154    	; 0x9e4 <xQueueGenericReset+0xac>
     94a:	23 8d       	ldd	r18, Z+27	; 0x1b
     94c:	22 23       	and	r18, r18
     94e:	09 f4       	brne	.+2      	; 0x952 <xQueueGenericReset+0x1a>
     950:	4b c0       	rjmp	.+150    	; 0x9e8 <xQueueGenericReset+0xb0>
     952:	02 2f       	mov	r16, r18
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9f ef       	ldi	r25, 0xFF	; 255
     95a:	b8 01       	movw	r22, r16
     95c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__udivmodhi4>
     960:	44 8d       	ldd	r20, Z+28	; 0x1c
     962:	84 2f       	mov	r24, r20
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	68 17       	cp	r22, r24
     968:	79 07       	cpc	r23, r25
     96a:	08 f4       	brcc	.+2      	; 0x96e <xQueueGenericReset+0x36>
     96c:	3f c0       	rjmp	.+126    	; 0x9ec <xQueueGenericReset+0xb4>
     96e:	ef 01       	movw	r28, r30
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	0f 92       	push	r0
     976:	60 81       	ld	r22, Z
     978:	71 81       	ldd	r23, Z+1	; 0x01
     97a:	fb 01       	movw	r30, r22
     97c:	24 9f       	mul	r18, r20
     97e:	e0 0d       	add	r30, r0
     980:	f1 1d       	adc	r31, r1
     982:	11 24       	eor	r1, r1
     984:	fd 83       	std	Y+5, r31	; 0x05
     986:	ec 83       	std	Y+4, r30	; 0x04
     988:	1a 8e       	std	Y+26, r1	; 0x1a
     98a:	7b 83       	std	Y+3, r23	; 0x03
     98c:	6a 83       	std	Y+2, r22	; 0x02
     98e:	01 50       	subi	r16, 0x01	; 1
     990:	11 09       	sbc	r17, r1
     992:	80 9f       	mul	r24, r16
     994:	a0 01       	movw	r20, r0
     996:	81 9f       	mul	r24, r17
     998:	50 0d       	add	r21, r0
     99a:	90 9f       	mul	r25, r16
     99c:	50 0d       	add	r21, r0
     99e:	11 24       	eor	r1, r1
     9a0:	cb 01       	movw	r24, r22
     9a2:	84 0f       	add	r24, r20
     9a4:	95 1f       	adc	r25, r21
     9a6:	9f 83       	std	Y+7, r25	; 0x07
     9a8:	8e 83       	std	Y+6, r24	; 0x06
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	8d 8f       	std	Y+29, r24	; 0x1d
     9ae:	8e 8f       	std	Y+30, r24	; 0x1e
     9b0:	31 11       	cpse	r19, r1
     9b2:	0c c0       	rjmp	.+24     	; 0x9cc <xQueueGenericReset+0x94>
     9b4:	88 85       	ldd	r24, Y+8	; 0x08
     9b6:	88 23       	and	r24, r24
     9b8:	89 f0       	breq	.+34     	; 0x9dc <xQueueGenericReset+0xa4>
     9ba:	ce 01       	movw	r24, r28
     9bc:	08 96       	adiw	r24, 0x08	; 8
     9be:	0e 94 26 0b 	call	0x164c	; 0x164c <xTaskRemoveFromEventList>
     9c2:	88 23       	and	r24, r24
     9c4:	59 f0       	breq	.+22     	; 0x9dc <xQueueGenericReset+0xa4>
     9c6:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <xQueueGenericReset+0xa4>
     9cc:	ce 01       	movw	r24, r28
     9ce:	08 96       	adiw	r24, 0x08	; 8
     9d0:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     9d4:	ce 01       	movw	r24, r28
     9d6:	41 96       	adiw	r24, 0x11	; 17
     9d8:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <xQueueGenericReset+0xb6>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <xQueueGenericReset+0xb6>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <xQueueGenericReset+0xb6>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <prvInitialiseNewQueue>:
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	f8 01       	movw	r30, r16
     9fe:	61 11       	cpse	r22, r1
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <prvInitialiseNewQueue+0x10>
     a02:	11 83       	std	Z+1, r17	; 0x01
     a04:	00 83       	st	Z, r16
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <prvInitialiseNewQueue+0x14>
     a08:	51 83       	std	Z+1, r21	; 0x01
     a0a:	40 83       	st	Z, r20
     a0c:	83 8f       	std	Z+27, r24	; 0x1b
     a0e:	64 8f       	std	Z+28, r22	; 0x1c
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	cf 01       	movw	r24, r30
     a14:	0e 94 9c 04 	call	0x938	; 0x938 <xQueueGenericReset>
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	08 95       	ret

00000a1e <xQueueGenericCreate>:
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	38 2f       	mov	r19, r24
     a2e:	e6 2f       	mov	r30, r22
     a30:	88 23       	and	r24, r24
     a32:	29 f1       	breq	.+74     	; 0xa7e <xQueueGenericCreate+0x60>
     a34:	68 2f       	mov	r22, r24
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__udivmodhi4>
     a40:	8e 2f       	mov	r24, r30
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	68 17       	cp	r22, r24
     a46:	79 07       	cpc	r23, r25
     a48:	e8 f0       	brcs	.+58     	; 0xa84 <xQueueGenericCreate+0x66>
     a4a:	3e 9f       	mul	r19, r30
     a4c:	c0 01       	movw	r24, r0
     a4e:	11 24       	eor	r1, r1
     a50:	81 3e       	cpi	r24, 0xE1	; 225
     a52:	2f ef       	ldi	r18, 0xFF	; 255
     a54:	92 07       	cpc	r25, r18
     a56:	c8 f4       	brcc	.+50     	; 0xa8a <xQueueGenericCreate+0x6c>
     a58:	d4 2e       	mov	r13, r20
     a5a:	de 2f       	mov	r29, r30
     a5c:	c3 2f       	mov	r28, r19
     a5e:	4f 96       	adiw	r24, 0x1f	; 31
     a60:	0e 94 35 03 	call	0x66a	; 0x66a <pvPortMalloc>
     a64:	7c 01       	movw	r14, r24
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	91 f0       	breq	.+36     	; 0xa8e <xQueueGenericCreate+0x70>
     a6a:	8c 01       	movw	r16, r24
     a6c:	2d 2d       	mov	r18, r13
     a6e:	ac 01       	movw	r20, r24
     a70:	41 5e       	subi	r20, 0xE1	; 225
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	6d 2f       	mov	r22, r29
     a76:	8c 2f       	mov	r24, r28
     a78:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <prvInitialiseNewQueue>
     a7c:	08 c0       	rjmp	.+16     	; 0xa8e <xQueueGenericCreate+0x70>
     a7e:	e1 2c       	mov	r14, r1
     a80:	f1 2c       	mov	r15, r1
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <xQueueGenericCreate+0x70>
     a84:	e1 2c       	mov	r14, r1
     a86:	f1 2c       	mov	r15, r1
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <xQueueGenericCreate+0x70>
     a8a:	e1 2c       	mov	r14, r1
     a8c:	f1 2c       	mov	r15, r1
     a8e:	c7 01       	movw	r24, r14
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	08 95       	ret

00000aa0 <xQueueCreateCountingSemaphore>:
     aa0:	cf 93       	push	r28
     aa2:	88 23       	and	r24, r24
     aa4:	61 f0       	breq	.+24     	; 0xabe <xQueueCreateCountingSemaphore+0x1e>
     aa6:	86 17       	cp	r24, r22
     aa8:	68 f0       	brcs	.+26     	; 0xac4 <xQueueCreateCountingSemaphore+0x24>
     aaa:	c6 2f       	mov	r28, r22
     aac:	42 e0       	ldi	r20, 0x02	; 2
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <xQueueGenericCreate>
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	41 f0       	breq	.+16     	; 0xac8 <xQueueCreateCountingSemaphore+0x28>
     ab8:	fc 01       	movw	r30, r24
     aba:	c2 8f       	std	Z+26, r28	; 0x1a
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <xQueueCreateCountingSemaphore+0x28>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <xQueueCreateCountingSemaphore+0x28>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <xQueueGenericSend>:
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	00 d0       	rcall	.+0      	; 0xade <xQueueGenericSend+0x12>
     ade:	00 d0       	rcall	.+0      	; 0xae0 <xQueueGenericSend+0x14>
     ae0:	1f 92       	push	r1
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	8c 01       	movw	r16, r24
     ae8:	7b 01       	movw	r14, r22
     aea:	5d 83       	std	Y+5, r21	; 0x05
     aec:	4c 83       	std	Y+4, r20	; 0x04
     aee:	c2 2e       	mov	r12, r18
     af0:	d1 2c       	mov	r13, r1
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	0f 92       	push	r0
     af8:	f8 01       	movw	r30, r16
     afa:	92 8d       	ldd	r25, Z+26	; 0x1a
     afc:	83 8d       	ldd	r24, Z+27	; 0x1b
     afe:	98 17       	cp	r25, r24
     b00:	18 f0       	brcs	.+6      	; 0xb08 <xQueueGenericSend+0x3c>
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	cf 12       	cpse	r12, r31
     b06:	19 c0       	rjmp	.+50     	; 0xb3a <xQueueGenericSend+0x6e>
     b08:	4c 2d       	mov	r20, r12
     b0a:	b7 01       	movw	r22, r14
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 1f 04 	call	0x83e	; 0x83e <prvCopyDataToQueue>
     b12:	f8 01       	movw	r30, r16
     b14:	91 89       	ldd	r25, Z+17	; 0x11
     b16:	99 23       	and	r25, r25
     b18:	49 f0       	breq	.+18     	; 0xb2c <xQueueGenericSend+0x60>
     b1a:	c8 01       	movw	r24, r16
     b1c:	41 96       	adiw	r24, 0x11	; 17
     b1e:	0e 94 26 0b 	call	0x164c	; 0x164c <xTaskRemoveFromEventList>
     b22:	88 23       	and	r24, r24
     b24:	31 f0       	breq	.+12     	; 0xb32 <xQueueGenericSend+0x66>
     b26:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <xQueueGenericSend+0x66>
     b2c:	81 11       	cpse	r24, r1
     b2e:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	4d c0       	rjmp	.+154    	; 0xbd4 <xQueueGenericSend+0x108>
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	9d 81       	ldd	r25, Y+5	; 0x05
     b3e:	89 2b       	or	r24, r25
     b40:	21 f4       	brne	.+8      	; 0xb4a <xQueueGenericSend+0x7e>
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	45 c0       	rjmp	.+138    	; 0xbd4 <xQueueGenericSend+0x108>
     b4a:	d1 10       	cpse	r13, r1
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <xQueueGenericSend+0x8e>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <vTaskInternalSetTimeOutState>
     b56:	dd 24       	eor	r13, r13
     b58:	d3 94       	inc	r13
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0e 94 b5 08 	call	0x116a	; 0x116a <vTaskSuspendAll>
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	0f 92       	push	r0
     b68:	f8 01       	movw	r30, r16
     b6a:	85 8d       	ldd	r24, Z+29	; 0x1d
     b6c:	8f 3f       	cpi	r24, 0xFF	; 255
     b6e:	09 f4       	brne	.+2      	; 0xb72 <xQueueGenericSend+0xa6>
     b70:	15 8e       	std	Z+29, r1	; 0x1d
     b72:	f8 01       	movw	r30, r16
     b74:	86 8d       	ldd	r24, Z+30	; 0x1e
     b76:	8f 3f       	cpi	r24, 0xFF	; 255
     b78:	09 f4       	brne	.+2      	; 0xb7c <xQueueGenericSend+0xb0>
     b7a:	16 8e       	std	Z+30, r1	; 0x1e
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	be 01       	movw	r22, r28
     b82:	6c 5f       	subi	r22, 0xFC	; 252
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <xTaskCheckForTimeOut>
     b8e:	81 11       	cpse	r24, r1
     b90:	1b c0       	rjmp	.+54     	; 0xbc8 <xQueueGenericSend+0xfc>
     b92:	c8 01       	movw	r24, r16
     b94:	0e 94 11 04 	call	0x822	; 0x822 <prvIsQueueFull>
     b98:	88 23       	and	r24, r24
     b9a:	81 f0       	breq	.+32     	; 0xbbc <xQueueGenericSend+0xf0>
     b9c:	6c 81       	ldd	r22, Y+4	; 0x04
     b9e:	7d 81       	ldd	r23, Y+5	; 0x05
     ba0:	c8 01       	movw	r24, r16
     ba2:	08 96       	adiw	r24, 0x08	; 8
     ba4:	0e 94 14 0b 	call	0x1628	; 0x1628 <vTaskPlaceOnEventList>
     ba8:	c8 01       	movw	r24, r16
     baa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <prvUnlockQueue>
     bae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
     bb2:	81 11       	cpse	r24, r1
     bb4:	9e cf       	rjmp	.-196    	; 0xaf2 <xQueueGenericSend+0x26>
     bb6:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     bba:	9b cf       	rjmp	.-202    	; 0xaf2 <xQueueGenericSend+0x26>
     bbc:	c8 01       	movw	r24, r16
     bbe:	0e 94 68 04 	call	0x8d0	; 0x8d0 <prvUnlockQueue>
     bc2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
     bc6:	95 cf       	rjmp	.-214    	; 0xaf2 <xQueueGenericSend+0x26>
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 68 04 	call	0x8d0	; 0x8d0 <prvUnlockQueue>
     bce:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	08 95       	ret

00000bf0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <xQueueSemaphoreTake+0xc>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <xQueueSemaphoreTake+0xe>
     bfe:	1f 92       	push	r1
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	8c 01       	movw	r16, r24
     c06:	7d 83       	std	Y+5, r23	; 0x05
     c08:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     c0a:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     c12:	f8 01       	movw	r30, r16
     c14:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     c16:	88 23       	and	r24, r24
     c18:	81 f0       	breq	.+32     	; 0xc3a <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     c1a:	81 50       	subi	r24, 0x01	; 1
     c1c:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c1e:	80 85       	ldd	r24, Z+8	; 0x08
     c20:	88 23       	and	r24, r24
     c22:	39 f0       	breq	.+14     	; 0xc32 <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c24:	c8 01       	movw	r24, r16
     c26:	08 96       	adiw	r24, 0x08	; 8
     c28:	0e 94 26 0b 	call	0x164c	; 0x164c <xTaskRemoveFromEventList>
     c2c:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     c2e:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	53 c0       	rjmp	.+166    	; 0xce0 <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	9d 81       	ldd	r25, Y+5	; 0x05
     c3e:	89 2b       	or	r24, r25
     c40:	21 f4       	brne	.+8      	; 0xc4a <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	4b c0       	rjmp	.+150    	; 0xce0 <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
     c4a:	f1 10       	cpse	r15, r1
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     c56:	ff 24       	eor	r15, r15
     c58:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     c5e:	0e 94 b5 08 	call	0x116a	; 0x116a <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	0f 92       	push	r0
     c68:	f8 01       	movw	r30, r16
     c6a:	85 8d       	ldd	r24, Z+29	; 0x1d
     c6c:	8f 3f       	cpi	r24, 0xFF	; 255
     c6e:	09 f4       	brne	.+2      	; 0xc72 <xQueueSemaphoreTake+0x82>
     c70:	15 8e       	std	Z+29, r1	; 0x1d
     c72:	f8 01       	movw	r30, r16
     c74:	86 8d       	ldd	r24, Z+30	; 0x1e
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	09 f4       	brne	.+2      	; 0xc7c <xQueueSemaphoreTake+0x8c>
     c7a:	16 8e       	std	Z+30, r1	; 0x1e
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     c80:	be 01       	movw	r22, r28
     c82:	6c 5f       	subi	r22, 0xFC	; 252
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <xTaskCheckForTimeOut>
     c8e:	81 11       	cpse	r24, r1
     c90:	1b c0       	rjmp	.+54     	; 0xcc8 <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     c92:	c8 01       	movw	r24, r16
     c94:	0e 94 04 04 	call	0x808	; 0x808 <prvIsQueueEmpty>
     c98:	88 23       	and	r24, r24
     c9a:	81 f0       	breq	.+32     	; 0xcbc <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c9c:	6c 81       	ldd	r22, Y+4	; 0x04
     c9e:	7d 81       	ldd	r23, Y+5	; 0x05
     ca0:	c8 01       	movw	r24, r16
     ca2:	41 96       	adiw	r24, 0x11	; 17
     ca4:	0e 94 14 0b 	call	0x1628	; 0x1628 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     cae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
     cb2:	81 11       	cpse	r24, r1
     cb4:	ab cf       	rjmp	.-170    	; 0xc0c <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
     cb6:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     cba:	a8 cf       	rjmp	.-176    	; 0xc0c <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     cbc:	c8 01       	movw	r24, r16
     cbe:	0e 94 68 04 	call	0x8d0	; 0x8d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     cc2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
     cc6:	a2 cf       	rjmp	.-188    	; 0xc0c <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     cc8:	c8 01       	movw	r24, r16
     cca:	0e 94 68 04 	call	0x8d0	; 0x8d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     cce:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     cd2:	c8 01       	movw	r24, r16
     cd4:	0e 94 04 04 	call	0x808	; 0x808 <prvIsQueueEmpty>
     cd8:	88 23       	and	r24, r24
     cda:	09 f4       	brne	.+2      	; 0xcde <xQueueSemaphoreTake+0xee>
     cdc:	97 cf       	rjmp	.-210    	; 0xc0c <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     cde:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	08 95       	ret

00000cf6 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     cf6:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <pxDelayedTaskList>
     cfa:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <pxDelayedTaskList+0x1>
     cfe:	80 81       	ld	r24, Z
     d00:	81 11       	cpse	r24, r1
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <prvResetNextTaskUnblockTime+0x1c>
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	9f ef       	ldi	r25, 0xFF	; 255
     d08:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <xNextTaskUnblockTime+0x1>
     d0c:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <xNextTaskUnblockTime>
     d10:	08 95       	ret
     d12:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <pxDelayedTaskList>
     d16:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <pxDelayedTaskList+0x1>
     d1a:	05 80       	ldd	r0, Z+5	; 0x05
     d1c:	f6 81       	ldd	r31, Z+6	; 0x06
     d1e:	e0 2d       	mov	r30, r0
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <xNextTaskUnblockTime+0x1>
     d28:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <xNextTaskUnblockTime>
     d2c:	08 95       	ret

00000d2e <prvDeleteTCB>:
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vPortFree>
     d3c:	ce 01       	movw	r24, r28
     d3e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vPortFree>
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <prvInitialiseNewTask>:
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	4c 01       	movw	r8, r24
     d68:	f5 01       	movw	r30, r10
     d6a:	87 89       	ldd	r24, Z+23	; 0x17
     d6c:	90 8d       	ldd	r25, Z+24	; 0x18
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	31 09       	sbc	r19, r1
     d72:	3c 01       	movw	r6, r24
     d74:	62 0e       	add	r6, r18
     d76:	73 1e       	adc	r7, r19
     d78:	61 15       	cp	r22, r1
     d7a:	71 05       	cpc	r23, r1
     d7c:	89 f4       	brne	.+34     	; 0xda0 <prvInitialiseNewTask+0x58>
     d7e:	15 c0       	rjmp	.+42     	; 0xdaa <prvInitialiseNewTask+0x62>
     d80:	82 2f       	mov	r24, r18
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	fb 01       	movw	r30, r22
     d86:	e8 0f       	add	r30, r24
     d88:	f9 1f       	adc	r31, r25
     d8a:	30 81       	ld	r19, Z
     d8c:	d5 01       	movw	r26, r10
     d8e:	a8 0f       	add	r26, r24
     d90:	b9 1f       	adc	r27, r25
     d92:	59 96       	adiw	r26, 0x19	; 25
     d94:	3c 93       	st	X, r19
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	29 f0       	breq	.+10     	; 0xda6 <prvInitialiseNewTask+0x5e>
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <prvInitialiseNewTask+0x5a>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	28 30       	cpi	r18, 0x08	; 8
     da4:	68 f3       	brcs	.-38     	; 0xd80 <prvInitialiseNewTask+0x38>
     da6:	f5 01       	movw	r30, r10
     da8:	10 a2       	std	Z+32, r1	; 0x20
     daa:	f3 e0       	ldi	r31, 0x03	; 3
     dac:	fe 15       	cp	r31, r14
     dae:	20 f4       	brcc	.+8      	; 0xdb8 <prvInitialiseNewTask+0x70>
     db0:	0f 2e       	mov	r0, r31
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	ef 2e       	mov	r14, r31
     db6:	f0 2d       	mov	r31, r0
     db8:	f5 01       	movw	r30, r10
     dba:	e6 8a       	std	Z+22, r14	; 0x16
     dbc:	c5 01       	movw	r24, r10
     dbe:	02 96       	adiw	r24, 0x02	; 2
     dc0:	0e 94 10 01 	call	0x220	; 0x220 <vListInitialiseItem>
     dc4:	c5 01       	movw	r24, r10
     dc6:	0c 96       	adiw	r24, 0x0c	; 12
     dc8:	0e 94 10 01 	call	0x220	; 0x220 <vListInitialiseItem>
     dcc:	f5 01       	movw	r30, r10
     dce:	b1 86       	std	Z+9, r11	; 0x09
     dd0:	a0 86       	std	Z+8, r10	; 0x08
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	8e 19       	sub	r24, r14
     dd8:	91 09       	sbc	r25, r1
     dda:	95 87       	std	Z+13, r25	; 0x0d
     ddc:	84 87       	std	Z+12, r24	; 0x0c
     dde:	b3 8a       	std	Z+19, r11	; 0x13
     de0:	a2 8a       	std	Z+18, r10	; 0x12
     de2:	a8 01       	movw	r20, r16
     de4:	b4 01       	movw	r22, r8
     de6:	c3 01       	movw	r24, r6
     de8:	0e 94 75 01 	call	0x2ea	; 0x2ea <pxPortInitialiseStack>
     dec:	f5 01       	movw	r30, r10
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	c1 14       	cp	r12, r1
     df4:	d1 04       	cpc	r13, r1
     df6:	19 f0       	breq	.+6      	; 0xdfe <prvInitialiseNewTask+0xb6>
     df8:	f6 01       	movw	r30, r12
     dfa:	b1 82       	std	Z+1, r11	; 0x01
     dfc:	a0 82       	st	Z, r10
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	7f 90       	pop	r7
     e16:	6f 90       	pop	r6
     e18:	08 95       	ret

00000e1a <prvInitialiseTaskLists>:
     e1a:	cf 93       	push	r28
     e1c:	c0 e0       	ldi	r28, 0x00	; 0
     e1e:	10 c0       	rjmp	.+32     	; 0xe40 <prvInitialiseTaskLists+0x26>
     e20:	8c 2f       	mov	r24, r28
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9c 01       	movw	r18, r24
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	85 57       	subi	r24, 0x75	; 117
     e38:	99 4f       	sbci	r25, 0xF9	; 249
     e3a:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     e3e:	cf 5f       	subi	r28, 0xFF	; 255
     e40:	c4 30       	cpi	r28, 0x04	; 4
     e42:	70 f3       	brcs	.-36     	; 0xe20 <prvInitialiseTaskLists+0x6>
     e44:	82 e8       	ldi	r24, 0x82	; 130
     e46:	96 e0       	ldi	r25, 0x06	; 6
     e48:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     e4c:	89 e7       	ldi	r24, 0x79	; 121
     e4e:	96 e0       	ldi	r25, 0x06	; 6
     e50:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     e54:	8c e6       	ldi	r24, 0x6C	; 108
     e56:	96 e0       	ldi	r25, 0x06	; 6
     e58:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     e5c:	83 e6       	ldi	r24, 0x63	; 99
     e5e:	96 e0       	ldi	r25, 0x06	; 6
     e60:	0e 94 02 01 	call	0x204	; 0x204 <vListInitialise>
     e64:	82 e8       	ldi	r24, 0x82	; 130
     e66:	96 e0       	ldi	r25, 0x06	; 6
     e68:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <pxDelayedTaskList+0x1>
     e6c:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <pxDelayedTaskList>
     e70:	89 e7       	ldi	r24, 0x79	; 121
     e72:	96 e0       	ldi	r25, 0x06	; 6
     e74:	90 93 76 06 	sts	0x0676, r25	; 0x800676 <pxOverflowDelayedTaskList+0x1>
     e78:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <pxOverflowDelayedTaskList>
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <prvAddNewTaskToReadyList>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	0f 92       	push	r0
     e8c:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <uxCurrentNumberOfTasks>
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <uxCurrentNumberOfTasks>
     e96:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <pxCurrentTCB>
     e9a:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     e9e:	89 2b       	or	r24, r25
     ea0:	59 f4       	brne	.+22     	; 0xeb8 <prvAddNewTaskToReadyList+0x38>
     ea2:	d0 93 b0 06 	sts	0x06B0, r29	; 0x8006b0 <pxCurrentTCB+0x1>
     ea6:	c0 93 af 06 	sts	0x06AF, r28	; 0x8006af <pxCurrentTCB>
     eaa:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <uxCurrentNumberOfTasks>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	99 f4       	brne	.+38     	; 0xed8 <prvAddNewTaskToReadyList+0x58>
     eb2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <prvInitialiseTaskLists>
     eb6:	10 c0       	rjmp	.+32     	; 0xed8 <prvAddNewTaskToReadyList+0x58>
     eb8:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xSchedulerRunning>
     ebc:	81 11       	cpse	r24, r1
     ebe:	0c c0       	rjmp	.+24     	; 0xed8 <prvAddNewTaskToReadyList+0x58>
     ec0:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <pxCurrentTCB>
     ec4:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     ec8:	96 89       	ldd	r25, Z+22	; 0x16
     eca:	8e 89       	ldd	r24, Y+22	; 0x16
     ecc:	89 17       	cp	r24, r25
     ece:	20 f0       	brcs	.+8      	; 0xed8 <prvAddNewTaskToReadyList+0x58>
     ed0:	d0 93 b0 06 	sts	0x06B0, r29	; 0x8006b0 <pxCurrentTCB+0x1>
     ed4:	c0 93 af 06 	sts	0x06AF, r28	; 0x8006af <pxCurrentTCB>
     ed8:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <uxTaskNumber>
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <uxTaskNumber>
     ee2:	8e 89       	ldd	r24, Y+22	; 0x16
     ee4:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <uxTopReadyPriority>
     ee8:	98 17       	cp	r25, r24
     eea:	10 f4       	brcc	.+4      	; 0xef0 <prvAddNewTaskToReadyList+0x70>
     eec:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxTopReadyPriority>
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fc 01       	movw	r30, r24
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	ee 0f       	add	r30, r30
     efe:	ff 1f       	adc	r31, r31
     f00:	8e 0f       	add	r24, r30
     f02:	9f 1f       	adc	r25, r31
     f04:	fc 01       	movw	r30, r24
     f06:	e5 57       	subi	r30, 0x75	; 117
     f08:	f9 4f       	sbci	r31, 0xF9	; 249
     f0a:	01 80       	ldd	r0, Z+1	; 0x01
     f0c:	f2 81       	ldd	r31, Z+2	; 0x02
     f0e:	e0 2d       	mov	r30, r0
     f10:	fd 83       	std	Y+5, r31	; 0x05
     f12:	ec 83       	std	Y+4, r30	; 0x04
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	95 81       	ldd	r25, Z+5	; 0x05
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	8e 83       	std	Y+6, r24	; 0x06
     f1c:	a4 81       	ldd	r26, Z+4	; 0x04
     f1e:	b5 81       	ldd	r27, Z+5	; 0x05
     f20:	ce 01       	movw	r24, r28
     f22:	02 96       	adiw	r24, 0x02	; 2
     f24:	13 96       	adiw	r26, 0x03	; 3
     f26:	9c 93       	st	X, r25
     f28:	8e 93       	st	-X, r24
     f2a:	12 97       	sbiw	r26, 0x02	; 2
     f2c:	95 83       	std	Z+5, r25	; 0x05
     f2e:	84 83       	std	Z+4, r24	; 0x04
     f30:	ee 89       	ldd	r30, Y+22	; 0x16
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	cf 01       	movw	r24, r30
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	e8 0f       	add	r30, r24
     f44:	f9 1f       	adc	r31, r25
     f46:	e5 57       	subi	r30, 0x75	; 117
     f48:	f9 4f       	sbci	r31, 0xF9	; 249
     f4a:	fb 87       	std	Y+11, r31	; 0x0b
     f4c:	ea 87       	std	Y+10, r30	; 0x0a
     f4e:	80 81       	ld	r24, Z
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 83       	st	Z, r24
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xSchedulerRunning>
     f5c:	88 23       	and	r24, r24
     f5e:	51 f0       	breq	.+20     	; 0xf74 <prvAddNewTaskToReadyList+0xf4>
     f60:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <pxCurrentTCB>
     f64:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     f68:	96 89       	ldd	r25, Z+22	; 0x16
     f6a:	8e 89       	ldd	r24, Y+22	; 0x16
     f6c:	98 17       	cp	r25, r24
     f6e:	10 f4       	brcc	.+4      	; 0xf74 <prvAddNewTaskToReadyList+0xf4>
     f70:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <prvCheckTasksWaitingTermination>:
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	1c c0       	rjmp	.+56     	; 0xfb8 <prvCheckTasksWaitingTermination+0x3e>
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	0f 92       	push	r0
     f86:	e0 91 68 06 	lds	r30, 0x0668	; 0x800668 <xTasksWaitingTermination+0x5>
     f8a:	f0 91 69 06 	lds	r31, 0x0669	; 0x800669 <xTasksWaitingTermination+0x6>
     f8e:	c6 81       	ldd	r28, Z+6	; 0x06
     f90:	d7 81       	ldd	r29, Z+7	; 0x07
     f92:	ce 01       	movw	r24, r28
     f94:	02 96       	adiw	r24, 0x02	; 2
     f96:	0e 94 45 01 	call	0x28a	; 0x28a <uxListRemove>
     f9a:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <uxCurrentNumberOfTasks>
     f9e:	81 50       	subi	r24, 0x01	; 1
     fa0:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <uxCurrentNumberOfTasks>
     fa4:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxDeletedTasksWaitingCleanUp>
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxDeletedTasksWaitingCleanUp>
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 97 06 	call	0xd2e	; 0xd2e <prvDeleteTCB>
     fb8:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxDeletedTasksWaitingCleanUp>
     fbc:	81 11       	cpse	r24, r1
     fbe:	e0 cf       	rjmp	.-64     	; 0xf80 <prvCheckTasksWaitingTermination+0x6>
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <prvIdleTask>:
     fc6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <prvCheckTasksWaitingTermination>
     fca:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <pxReadyTasksLists>
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	d0 f3       	brcs	.-12     	; 0xfc6 <prvIdleTask>
     fd2:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
     fd6:	f7 cf       	rjmp	.-18     	; 0xfc6 <prvIdleTask>

00000fd8 <prvAddCurrentTaskToDelayedList>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	00 91 5f 06 	lds	r16, 0x065F	; 0x80065f <xTickCount>
     fe6:	10 91 60 06 	lds	r17, 0x0660	; 0x800660 <xTickCount+0x1>
     fea:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <pxCurrentTCB>
     fee:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
     ff2:	02 96       	adiw	r24, 0x02	; 2
     ff4:	0e 94 45 01 	call	0x28a	; 0x28a <uxListRemove>
     ff8:	c0 0f       	add	r28, r16
     ffa:	d1 1f       	adc	r29, r17
     ffc:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <pxCurrentTCB>
    1000:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    1004:	d3 83       	std	Z+3, r29	; 0x03
    1006:	c2 83       	std	Z+2, r28	; 0x02
    1008:	c0 17       	cp	r28, r16
    100a:	d1 07       	cpc	r29, r17
    100c:	68 f4       	brcc	.+26     	; 0x1028 <prvAddCurrentTaskToDelayedList+0x50>
    100e:	60 91 af 06 	lds	r22, 0x06AF	; 0x8006af <pxCurrentTCB>
    1012:	70 91 b0 06 	lds	r23, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    1016:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <pxOverflowDelayedTaskList>
    101a:	90 91 76 06 	lds	r25, 0x0676	; 0x800676 <pxOverflowDelayedTaskList+0x1>
    101e:	6e 5f       	subi	r22, 0xFE	; 254
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	0e 94 14 01 	call	0x228	; 0x228 <vListInsert>
    1026:	17 c0       	rjmp	.+46     	; 0x1056 <prvAddCurrentTaskToDelayedList+0x7e>
    1028:	60 91 af 06 	lds	r22, 0x06AF	; 0x8006af <pxCurrentTCB>
    102c:	70 91 b0 06 	lds	r23, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    1030:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <pxDelayedTaskList>
    1034:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <pxDelayedTaskList+0x1>
    1038:	6e 5f       	subi	r22, 0xFE	; 254
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	0e 94 14 01 	call	0x228	; 0x228 <vListInsert>
    1040:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <xNextTaskUnblockTime>
    1044:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <xNextTaskUnblockTime+0x1>
    1048:	c8 17       	cp	r28, r24
    104a:	d9 07       	cpc	r29, r25
    104c:	20 f4       	brcc	.+8      	; 0x1056 <prvAddCurrentTaskToDelayedList+0x7e>
    104e:	d0 93 57 06 	sts	0x0657, r29	; 0x800657 <xNextTaskUnblockTime+0x1>
    1052:	c0 93 56 06 	sts	0x0656, r28	; 0x800656 <xNextTaskUnblockTime>
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <xTaskCreate>:
    1060:	2f 92       	push	r2
    1062:	3f 92       	push	r3
    1064:	4f 92       	push	r4
    1066:	5f 92       	push	r5
    1068:	6f 92       	push	r6
    106a:	7f 92       	push	r7
    106c:	8f 92       	push	r8
    106e:	9f 92       	push	r9
    1070:	af 92       	push	r10
    1072:	bf 92       	push	r11
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	3c 01       	movw	r6, r24
    1086:	1b 01       	movw	r2, r22
    1088:	5a 01       	movw	r10, r20
    108a:	29 01       	movw	r4, r18
    108c:	ca 01       	movw	r24, r20
    108e:	0e 94 35 03 	call	0x66a	; 0x66a <pvPortMalloc>
    1092:	6c 01       	movw	r12, r24
    1094:	89 2b       	or	r24, r25
    1096:	99 f0       	breq	.+38     	; 0x10be <xTaskCreate+0x5e>
    1098:	86 e2       	ldi	r24, 0x26	; 38
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 35 03 	call	0x66a	; 0x66a <pvPortMalloc>
    10a0:	ec 01       	movw	r28, r24
    10a2:	89 2b       	or	r24, r25
    10a4:	41 f0       	breq	.+16     	; 0x10b6 <xTaskCreate+0x56>
    10a6:	86 e2       	ldi	r24, 0x26	; 38
    10a8:	fe 01       	movw	r30, r28
    10aa:	11 92       	st	Z+, r1
    10ac:	8a 95       	dec	r24
    10ae:	e9 f7       	brne	.-6      	; 0x10aa <xTaskCreate+0x4a>
    10b0:	d8 8e       	std	Y+24, r13	; 0x18
    10b2:	cf 8a       	std	Y+23, r12	; 0x17
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <xTaskCreate+0x62>
    10b6:	c6 01       	movw	r24, r12
    10b8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vPortFree>
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <xTaskCreate+0x62>
    10be:	c0 e0       	ldi	r28, 0x00	; 0
    10c0:	d0 e0       	ldi	r29, 0x00	; 0
    10c2:	20 97       	sbiw	r28, 0x00	; 0
    10c4:	91 f0       	breq	.+36     	; 0x10ea <xTaskCreate+0x8a>
    10c6:	95 01       	movw	r18, r10
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	81 2c       	mov	r8, r1
    10ce:	91 2c       	mov	r9, r1
    10d0:	5e 01       	movw	r10, r28
    10d2:	67 01       	movw	r12, r14
    10d4:	e0 2e       	mov	r14, r16
    10d6:	82 01       	movw	r16, r4
    10d8:	b1 01       	movw	r22, r2
    10da:	c3 01       	movw	r24, r6
    10dc:	0e 94 a4 06 	call	0xd48	; 0xd48 <prvInitialiseNewTask>
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 40 07 	call	0xe80	; 0xe80 <prvAddNewTaskToReadyList>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <xTaskCreate+0x8c>
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	bf 90       	pop	r11
    10fe:	af 90       	pop	r10
    1100:	9f 90       	pop	r9
    1102:	8f 90       	pop	r8
    1104:	7f 90       	pop	r7
    1106:	6f 90       	pop	r6
    1108:	5f 90       	pop	r5
    110a:	4f 90       	pop	r4
    110c:	3f 90       	pop	r3
    110e:	2f 90       	pop	r2
    1110:	08 95       	ret

00001112 <vTaskStartScheduler>:
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	0f 2e       	mov	r0, r31
    111a:	f4 e5       	ldi	r31, 0x54	; 84
    111c:	ef 2e       	mov	r14, r31
    111e:	f6 e0       	ldi	r31, 0x06	; 6
    1120:	ff 2e       	mov	r15, r31
    1122:	f0 2d       	mov	r31, r0
    1124:	00 e0       	ldi	r16, 0x00	; 0
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	45 e5       	ldi	r20, 0x55	; 85
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	61 e6       	ldi	r22, 0x61	; 97
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	83 ee       	ldi	r24, 0xE3	; 227
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	0e 94 30 08 	call	0x1060	; 0x1060 <xTaskCreate>
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	81 f4       	brne	.+32     	; 0x115e <vTaskStartScheduler+0x4c>
    113e:	f8 94       	cli
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <xNextTaskUnblockTime+0x1>
    1148:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <xNextTaskUnblockTime>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xSchedulerRunning>
    1152:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <xTickCount+0x1>
    1156:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <xTickCount>
    115a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <xPortStartScheduler>
    115e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <vTaskSuspendAll>:
    116a:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <uxSchedulerSuspended>
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <uxSchedulerSuspended>
    1174:	08 95       	ret

00001176 <xTaskIncrementTick>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <uxSchedulerSuspended>
    1182:	81 11       	cpse	r24, r1
    1184:	01 c1       	rjmp	.+514    	; 0x1388 <xTaskIncrementTick+0x212>
    1186:	c0 91 5f 06 	lds	r28, 0x065F	; 0x80065f <xTickCount>
    118a:	d0 91 60 06 	lds	r29, 0x0660	; 0x800660 <xTickCount+0x1>
    118e:	8e 01       	movw	r16, r28
    1190:	0f 5f       	subi	r16, 0xFF	; 255
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	10 93 60 06 	sts	0x0660, r17	; 0x800660 <xTickCount+0x1>
    1198:	00 93 5f 06 	sts	0x065F, r16	; 0x80065f <xTickCount>
    119c:	01 15       	cp	r16, r1
    119e:	11 05       	cpc	r17, r1
    11a0:	b9 f4       	brne	.+46     	; 0x11d0 <xTaskIncrementTick+0x5a>
    11a2:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <pxDelayedTaskList>
    11a6:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <pxDelayedTaskList+0x1>
    11aa:	20 91 75 06 	lds	r18, 0x0675	; 0x800675 <pxOverflowDelayedTaskList>
    11ae:	30 91 76 06 	lds	r19, 0x0676	; 0x800676 <pxOverflowDelayedTaskList+0x1>
    11b2:	30 93 78 06 	sts	0x0678, r19	; 0x800678 <pxDelayedTaskList+0x1>
    11b6:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <pxDelayedTaskList>
    11ba:	90 93 76 06 	sts	0x0676, r25	; 0x800676 <pxOverflowDelayedTaskList+0x1>
    11be:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <pxOverflowDelayedTaskList>
    11c2:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <xNumOfOverflows>
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <xNumOfOverflows>
    11cc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <prvResetNextTaskUnblockTime>
    11d0:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <xNextTaskUnblockTime>
    11d4:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <xNextTaskUnblockTime+0x1>
    11d8:	08 17       	cp	r16, r24
    11da:	19 07       	cpc	r17, r25
    11dc:	20 f4       	brcc	.+8      	; 0x11e6 <xTaskIncrementTick+0x70>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	b8 c0       	rjmp	.+368    	; 0x1352 <xTaskIncrementTick+0x1dc>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <xTaskIncrementTick+0x72>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <pxDelayedTaskList>
    11ec:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <pxDelayedTaskList+0x1>
    11f0:	90 81       	ld	r25, Z
    11f2:	91 11       	cpse	r25, r1
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <xTaskIncrementTick+0x8e>
    11f6:	2f ef       	ldi	r18, 0xFF	; 255
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	30 93 57 06 	sts	0x0657, r19	; 0x800657 <xNextTaskUnblockTime+0x1>
    11fe:	20 93 56 06 	sts	0x0656, r18	; 0x800656 <xNextTaskUnblockTime>
    1202:	a7 c0       	rjmp	.+334    	; 0x1352 <xTaskIncrementTick+0x1dc>
    1204:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <pxDelayedTaskList>
    1208:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <pxDelayedTaskList+0x1>
    120c:	05 80       	ldd	r0, Z+5	; 0x05
    120e:	f6 81       	ldd	r31, Z+6	; 0x06
    1210:	e0 2d       	mov	r30, r0
    1212:	06 80       	ldd	r0, Z+6	; 0x06
    1214:	f7 81       	ldd	r31, Z+7	; 0x07
    1216:	e0 2d       	mov	r30, r0
    1218:	22 81       	ldd	r18, Z+2	; 0x02
    121a:	33 81       	ldd	r19, Z+3	; 0x03
    121c:	02 17       	cp	r16, r18
    121e:	13 07       	cpc	r17, r19
    1220:	28 f4       	brcc	.+10     	; 0x122c <xTaskIncrementTick+0xb6>
    1222:	30 93 57 06 	sts	0x0657, r19	; 0x800657 <xNextTaskUnblockTime+0x1>
    1226:	20 93 56 06 	sts	0x0656, r18	; 0x800656 <xNextTaskUnblockTime>
    122a:	93 c0       	rjmp	.+294    	; 0x1352 <xTaskIncrementTick+0x1dc>
    122c:	a2 85       	ldd	r26, Z+10	; 0x0a
    122e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1230:	24 81       	ldd	r18, Z+4	; 0x04
    1232:	35 81       	ldd	r19, Z+5	; 0x05
    1234:	46 81       	ldd	r20, Z+6	; 0x06
    1236:	57 81       	ldd	r21, Z+7	; 0x07
    1238:	e9 01       	movw	r28, r18
    123a:	5d 83       	std	Y+5, r21	; 0x05
    123c:	4c 83       	std	Y+4, r20	; 0x04
    123e:	26 81       	ldd	r18, Z+6	; 0x06
    1240:	37 81       	ldd	r19, Z+7	; 0x07
    1242:	44 81       	ldd	r20, Z+4	; 0x04
    1244:	55 81       	ldd	r21, Z+5	; 0x05
    1246:	e9 01       	movw	r28, r18
    1248:	5b 83       	std	Y+3, r21	; 0x03
    124a:	4a 83       	std	Y+2, r20	; 0x02
    124c:	11 96       	adiw	r26, 0x01	; 1
    124e:	2d 91       	ld	r18, X+
    1250:	3c 91       	ld	r19, X
    1252:	12 97       	sbiw	r26, 0x02	; 2
    1254:	af 01       	movw	r20, r30
    1256:	4e 5f       	subi	r20, 0xFE	; 254
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	24 17       	cp	r18, r20
    125c:	35 07       	cpc	r19, r21
    125e:	31 f4       	brne	.+12     	; 0x126c <xTaskIncrementTick+0xf6>
    1260:	26 81       	ldd	r18, Z+6	; 0x06
    1262:	37 81       	ldd	r19, Z+7	; 0x07
    1264:	12 96       	adiw	r26, 0x02	; 2
    1266:	3c 93       	st	X, r19
    1268:	2e 93       	st	-X, r18
    126a:	11 97       	sbiw	r26, 0x01	; 1
    126c:	13 86       	std	Z+11, r1	; 0x0b
    126e:	12 86       	std	Z+10, r1	; 0x0a
    1270:	9c 91       	ld	r25, X
    1272:	91 50       	subi	r25, 0x01	; 1
    1274:	9c 93       	st	X, r25
    1276:	a4 89       	ldd	r26, Z+20	; 0x14
    1278:	b5 89       	ldd	r27, Z+21	; 0x15
    127a:	10 97       	sbiw	r26, 0x00	; 0
    127c:	19 f1       	breq	.+70     	; 0x12c4 <xTaskIncrementTick+0x14e>
    127e:	26 85       	ldd	r18, Z+14	; 0x0e
    1280:	37 85       	ldd	r19, Z+15	; 0x0f
    1282:	60 89       	ldd	r22, Z+16	; 0x10
    1284:	71 89       	ldd	r23, Z+17	; 0x11
    1286:	e9 01       	movw	r28, r18
    1288:	7d 83       	std	Y+5, r23	; 0x05
    128a:	6c 83       	std	Y+4, r22	; 0x04
    128c:	20 89       	ldd	r18, Z+16	; 0x10
    128e:	31 89       	ldd	r19, Z+17	; 0x11
    1290:	66 85       	ldd	r22, Z+14	; 0x0e
    1292:	77 85       	ldd	r23, Z+15	; 0x0f
    1294:	e9 01       	movw	r28, r18
    1296:	7b 83       	std	Y+3, r23	; 0x03
    1298:	6a 83       	std	Y+2, r22	; 0x02
    129a:	11 96       	adiw	r26, 0x01	; 1
    129c:	6d 91       	ld	r22, X+
    129e:	7c 91       	ld	r23, X
    12a0:	12 97       	sbiw	r26, 0x02	; 2
    12a2:	9f 01       	movw	r18, r30
    12a4:	24 5f       	subi	r18, 0xF4	; 244
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	62 17       	cp	r22, r18
    12aa:	73 07       	cpc	r23, r19
    12ac:	31 f4       	brne	.+12     	; 0x12ba <xTaskIncrementTick+0x144>
    12ae:	20 89       	ldd	r18, Z+16	; 0x10
    12b0:	31 89       	ldd	r19, Z+17	; 0x11
    12b2:	12 96       	adiw	r26, 0x02	; 2
    12b4:	3c 93       	st	X, r19
    12b6:	2e 93       	st	-X, r18
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	15 8a       	std	Z+21, r1	; 0x15
    12bc:	14 8a       	std	Z+20, r1	; 0x14
    12be:	9c 91       	ld	r25, X
    12c0:	91 50       	subi	r25, 0x01	; 1
    12c2:	9c 93       	st	X, r25
    12c4:	26 89       	ldd	r18, Z+22	; 0x16
    12c6:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <uxTopReadyPriority>
    12ca:	92 17       	cp	r25, r18
    12cc:	10 f4       	brcc	.+4      	; 0x12d2 <xTaskIncrementTick+0x15c>
    12ce:	20 93 5e 06 	sts	0x065E, r18	; 0x80065e <uxTopReadyPriority>
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	d9 01       	movw	r26, r18
    12d6:	aa 0f       	add	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	aa 0f       	add	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	aa 0f       	add	r26, r26
    12e0:	bb 1f       	adc	r27, r27
    12e2:	2a 0f       	add	r18, r26
    12e4:	3b 1f       	adc	r19, r27
    12e6:	d9 01       	movw	r26, r18
    12e8:	a5 57       	subi	r26, 0x75	; 117
    12ea:	b9 4f       	sbci	r27, 0xF9	; 249
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	0d 90       	ld	r0, X+
    12f0:	bc 91       	ld	r27, X
    12f2:	a0 2d       	mov	r26, r0
    12f4:	b5 83       	std	Z+5, r27	; 0x05
    12f6:	a4 83       	std	Z+4, r26	; 0x04
    12f8:	14 96       	adiw	r26, 0x04	; 4
    12fa:	2d 91       	ld	r18, X+
    12fc:	3c 91       	ld	r19, X
    12fe:	15 97       	sbiw	r26, 0x05	; 5
    1300:	37 83       	std	Z+7, r19	; 0x07
    1302:	26 83       	std	Z+6, r18	; 0x06
    1304:	14 96       	adiw	r26, 0x04	; 4
    1306:	2d 91       	ld	r18, X+
    1308:	3c 91       	ld	r19, X
    130a:	15 97       	sbiw	r26, 0x05	; 5
    130c:	e9 01       	movw	r28, r18
    130e:	5b 83       	std	Y+3, r21	; 0x03
    1310:	4a 83       	std	Y+2, r20	; 0x02
    1312:	15 96       	adiw	r26, 0x05	; 5
    1314:	5c 93       	st	X, r21
    1316:	4e 93       	st	-X, r20
    1318:	14 97       	sbiw	r26, 0x04	; 4
    131a:	a6 89       	ldd	r26, Z+22	; 0x16
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	9d 01       	movw	r18, r26
    1320:	22 0f       	add	r18, r18
    1322:	33 1f       	adc	r19, r19
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	a2 0f       	add	r26, r18
    132e:	b3 1f       	adc	r27, r19
    1330:	a5 57       	subi	r26, 0x75	; 117
    1332:	b9 4f       	sbci	r27, 0xF9	; 249
    1334:	b3 87       	std	Z+11, r27	; 0x0b
    1336:	a2 87       	std	Z+10, r26	; 0x0a
    1338:	9c 91       	ld	r25, X
    133a:	9f 5f       	subi	r25, 0xFF	; 255
    133c:	9c 93       	st	X, r25
    133e:	26 89       	ldd	r18, Z+22	; 0x16
    1340:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <pxCurrentTCB>
    1344:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    1348:	96 89       	ldd	r25, Z+22	; 0x16
    134a:	92 17       	cp	r25, r18
    134c:	08 f4       	brcc	.+2      	; 0x1350 <xTaskIncrementTick+0x1da>
    134e:	49 cf       	rjmp	.-366    	; 0x11e2 <xTaskIncrementTick+0x6c>
    1350:	4b cf       	rjmp	.-362    	; 0x11e8 <xTaskIncrementTick+0x72>
    1352:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <pxCurrentTCB>
    1356:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    135a:	26 89       	ldd	r18, Z+22	; 0x16
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	f9 01       	movw	r30, r18
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	2e 0f       	add	r18, r30
    136e:	3f 1f       	adc	r19, r31
    1370:	f9 01       	movw	r30, r18
    1372:	e5 57       	subi	r30, 0x75	; 117
    1374:	f9 4f       	sbci	r31, 0xF9	; 249
    1376:	90 81       	ld	r25, Z
    1378:	92 30       	cpi	r25, 0x02	; 2
    137a:	08 f0       	brcs	.+2      	; 0x137e <xTaskIncrementTick+0x208>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 91 5a 06 	lds	r25, 0x065A	; 0x80065a <xYieldPending>
    1382:	91 11       	cpse	r25, r1
    1384:	0c c0       	rjmp	.+24     	; 0x139e <xTaskIncrementTick+0x228>
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <xTaskIncrementTick+0x22a>
    1388:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <xPendedTicks>
    138c:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <xPendedTicks+0x1>
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <xPendedTicks+0x1>
    1396:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <xPendedTicks>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <xTaskIncrementTick+0x22a>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <xTaskResumeAll>:
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	0f 92       	push	r0
    13b4:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <uxSchedulerSuspended>
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <uxSchedulerSuspended>
    13be:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <uxSchedulerSuspended>
    13c2:	81 11       	cpse	r24, r1
    13c4:	bf c0       	rjmp	.+382    	; 0x1544 <xTaskResumeAll+0x19a>
    13c6:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <uxCurrentNumberOfTasks>
    13ca:	81 11       	cpse	r24, r1
    13cc:	96 c0       	rjmp	.+300    	; 0x14fa <xTaskResumeAll+0x150>
    13ce:	bd c0       	rjmp	.+378    	; 0x154a <xTaskResumeAll+0x1a0>
    13d0:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <xPendingReadyList+0x5>
    13d4:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <xPendingReadyList+0x6>
    13d8:	06 80       	ldd	r0, Z+6	; 0x06
    13da:	f7 81       	ldd	r31, Z+7	; 0x07
    13dc:	e0 2d       	mov	r30, r0
    13de:	a4 89       	ldd	r26, Z+20	; 0x14
    13e0:	b5 89       	ldd	r27, Z+21	; 0x15
    13e2:	c6 85       	ldd	r28, Z+14	; 0x0e
    13e4:	d7 85       	ldd	r29, Z+15	; 0x0f
    13e6:	80 89       	ldd	r24, Z+16	; 0x10
    13e8:	91 89       	ldd	r25, Z+17	; 0x11
    13ea:	9d 83       	std	Y+5, r25	; 0x05
    13ec:	8c 83       	std	Y+4, r24	; 0x04
    13ee:	c0 89       	ldd	r28, Z+16	; 0x10
    13f0:	d1 89       	ldd	r29, Z+17	; 0x11
    13f2:	86 85       	ldd	r24, Z+14	; 0x0e
    13f4:	97 85       	ldd	r25, Z+15	; 0x0f
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	11 96       	adiw	r26, 0x01	; 1
    13fc:	2d 91       	ld	r18, X+
    13fe:	3c 91       	ld	r19, X
    1400:	12 97       	sbiw	r26, 0x02	; 2
    1402:	cf 01       	movw	r24, r30
    1404:	0c 96       	adiw	r24, 0x0c	; 12
    1406:	28 17       	cp	r18, r24
    1408:	39 07       	cpc	r19, r25
    140a:	31 f4       	brne	.+12     	; 0x1418 <xTaskResumeAll+0x6e>
    140c:	80 89       	ldd	r24, Z+16	; 0x10
    140e:	91 89       	ldd	r25, Z+17	; 0x11
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	9c 93       	st	X, r25
    1414:	8e 93       	st	-X, r24
    1416:	11 97       	sbiw	r26, 0x01	; 1
    1418:	15 8a       	std	Z+21, r1	; 0x15
    141a:	14 8a       	std	Z+20, r1	; 0x14
    141c:	8c 91       	ld	r24, X
    141e:	81 50       	subi	r24, 0x01	; 1
    1420:	8c 93       	st	X, r24
    1422:	a2 85       	ldd	r26, Z+10	; 0x0a
    1424:	b3 85       	ldd	r27, Z+11	; 0x0b
    1426:	c4 81       	ldd	r28, Z+4	; 0x04
    1428:	d5 81       	ldd	r29, Z+5	; 0x05
    142a:	86 81       	ldd	r24, Z+6	; 0x06
    142c:	97 81       	ldd	r25, Z+7	; 0x07
    142e:	9d 83       	std	Y+5, r25	; 0x05
    1430:	8c 83       	std	Y+4, r24	; 0x04
    1432:	c6 81       	ldd	r28, Z+6	; 0x06
    1434:	d7 81       	ldd	r29, Z+7	; 0x07
    1436:	84 81       	ldd	r24, Z+4	; 0x04
    1438:	95 81       	ldd	r25, Z+5	; 0x05
    143a:	9b 83       	std	Y+3, r25	; 0x03
    143c:	8a 83       	std	Y+2, r24	; 0x02
    143e:	11 96       	adiw	r26, 0x01	; 1
    1440:	8d 91       	ld	r24, X+
    1442:	9c 91       	ld	r25, X
    1444:	12 97       	sbiw	r26, 0x02	; 2
    1446:	9f 01       	movw	r18, r30
    1448:	2e 5f       	subi	r18, 0xFE	; 254
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	82 17       	cp	r24, r18
    144e:	93 07       	cpc	r25, r19
    1450:	31 f4       	brne	.+12     	; 0x145e <xTaskResumeAll+0xb4>
    1452:	86 81       	ldd	r24, Z+6	; 0x06
    1454:	97 81       	ldd	r25, Z+7	; 0x07
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	9c 93       	st	X, r25
    145a:	8e 93       	st	-X, r24
    145c:	11 97       	sbiw	r26, 0x01	; 1
    145e:	13 86       	std	Z+11, r1	; 0x0b
    1460:	12 86       	std	Z+10, r1	; 0x0a
    1462:	8c 91       	ld	r24, X
    1464:	81 50       	subi	r24, 0x01	; 1
    1466:	8c 93       	st	X, r24
    1468:	86 89       	ldd	r24, Z+22	; 0x16
    146a:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <uxTopReadyPriority>
    146e:	98 17       	cp	r25, r24
    1470:	10 f4       	brcc	.+4      	; 0x1476 <xTaskResumeAll+0xcc>
    1472:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxTopReadyPriority>
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	dc 01       	movw	r26, r24
    147a:	aa 0f       	add	r26, r26
    147c:	bb 1f       	adc	r27, r27
    147e:	aa 0f       	add	r26, r26
    1480:	bb 1f       	adc	r27, r27
    1482:	aa 0f       	add	r26, r26
    1484:	bb 1f       	adc	r27, r27
    1486:	8a 0f       	add	r24, r26
    1488:	9b 1f       	adc	r25, r27
    148a:	dc 01       	movw	r26, r24
    148c:	a5 57       	subi	r26, 0x75	; 117
    148e:	b9 4f       	sbci	r27, 0xF9	; 249
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	0d 90       	ld	r0, X+
    1494:	bc 91       	ld	r27, X
    1496:	a0 2d       	mov	r26, r0
    1498:	b5 83       	std	Z+5, r27	; 0x05
    149a:	a4 83       	std	Z+4, r26	; 0x04
    149c:	14 96       	adiw	r26, 0x04	; 4
    149e:	8d 91       	ld	r24, X+
    14a0:	9c 91       	ld	r25, X
    14a2:	15 97       	sbiw	r26, 0x05	; 5
    14a4:	97 83       	std	Z+7, r25	; 0x07
    14a6:	86 83       	std	Z+6, r24	; 0x06
    14a8:	14 96       	adiw	r26, 0x04	; 4
    14aa:	cd 91       	ld	r28, X+
    14ac:	dc 91       	ld	r29, X
    14ae:	15 97       	sbiw	r26, 0x05	; 5
    14b0:	3b 83       	std	Y+3, r19	; 0x03
    14b2:	2a 83       	std	Y+2, r18	; 0x02
    14b4:	15 96       	adiw	r26, 0x05	; 5
    14b6:	3c 93       	st	X, r19
    14b8:	2e 93       	st	-X, r18
    14ba:	14 97       	sbiw	r26, 0x04	; 4
    14bc:	a6 89       	ldd	r26, Z+22	; 0x16
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	cd 01       	movw	r24, r26
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	a8 0f       	add	r26, r24
    14d0:	b9 1f       	adc	r27, r25
    14d2:	a5 57       	subi	r26, 0x75	; 117
    14d4:	b9 4f       	sbci	r27, 0xF9	; 249
    14d6:	b3 87       	std	Z+11, r27	; 0x0b
    14d8:	a2 87       	std	Z+10, r26	; 0x0a
    14da:	8c 91       	ld	r24, X
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	8c 93       	st	X, r24
    14e0:	96 89       	ldd	r25, Z+22	; 0x16
    14e2:	a0 91 af 06 	lds	r26, 0x06AF	; 0x8006af <pxCurrentTCB>
    14e6:	b0 91 b0 06 	lds	r27, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    14ea:	56 96       	adiw	r26, 0x16	; 22
    14ec:	8c 91       	ld	r24, X
    14ee:	98 17       	cp	r25, r24
    14f0:	30 f0       	brcs	.+12     	; 0x14fe <xTaskResumeAll+0x154>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xYieldPending>
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <xTaskResumeAll+0x154>
    14fa:	e0 e0       	ldi	r30, 0x00	; 0
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <xPendingReadyList>
    1502:	81 11       	cpse	r24, r1
    1504:	65 cf       	rjmp	.-310    	; 0x13d0 <xTaskResumeAll+0x26>
    1506:	ef 2b       	or	r30, r31
    1508:	11 f0       	breq	.+4      	; 0x150e <xTaskResumeAll+0x164>
    150a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <prvResetNextTaskUnblockTime>
    150e:	c0 91 5b 06 	lds	r28, 0x065B	; 0x80065b <xPendedTicks>
    1512:	d0 91 5c 06 	lds	r29, 0x065C	; 0x80065c <xPendedTicks+0x1>
    1516:	20 97       	sbiw	r28, 0x00	; 0
    1518:	69 f0       	breq	.+26     	; 0x1534 <xTaskResumeAll+0x18a>
    151a:	0e 94 bb 08 	call	0x1176	; 0x1176 <xTaskIncrementTick>
    151e:	88 23       	and	r24, r24
    1520:	19 f0       	breq	.+6      	; 0x1528 <xTaskResumeAll+0x17e>
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xYieldPending>
    1528:	21 97       	sbiw	r28, 0x01	; 1
    152a:	b9 f7       	brne	.-18     	; 0x151a <xTaskResumeAll+0x170>
    152c:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <xPendedTicks+0x1>
    1530:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <xPendedTicks>
    1534:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <xYieldPending>
    1538:	88 23       	and	r24, r24
    153a:	31 f0       	breq	.+12     	; 0x1548 <xTaskResumeAll+0x19e>
    153c:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	03 c0       	rjmp	.+6      	; 0x154a <xTaskResumeAll+0x1a0>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	01 c0       	rjmp	.+2      	; 0x154a <xTaskResumeAll+0x1a0>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <vTaskDelay>:
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
    155a:	89 2b       	or	r24, r25
    155c:	49 f0       	breq	.+18     	; 0x1570 <vTaskDelay+0x1c>
    155e:	0e 94 b5 08 	call	0x116a	; 0x116a <vTaskSuspendAll>
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	ce 01       	movw	r24, r28
    1566:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prvAddCurrentTaskToDelayedList>
    156a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xTaskResumeAll>
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <vTaskDelay+0x1e>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	81 11       	cpse	r24, r1
    1574:	02 c0       	rjmp	.+4      	; 0x157a <vTaskDelay+0x26>
    1576:	0e 94 10 02 	call	0x420	; 0x420 <vPortYield>
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <vTaskSwitchContext>:
    1580:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <uxSchedulerSuspended>
    1584:	88 23       	and	r24, r24
    1586:	21 f0       	breq	.+8      	; 0x1590 <vTaskSwitchContext+0x10>
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xYieldPending>
    158e:	08 95       	ret
    1590:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <xYieldPending>
    1594:	20 91 5e 06 	lds	r18, 0x065E	; 0x80065e <uxTopReadyPriority>
    1598:	01 c0       	rjmp	.+2      	; 0x159c <vTaskSwitchContext+0x1c>
    159a:	21 50       	subi	r18, 0x01	; 1
    159c:	82 2f       	mov	r24, r18
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	fc 01       	movw	r30, r24
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	e8 0f       	add	r30, r24
    15b0:	f9 1f       	adc	r31, r25
    15b2:	e5 57       	subi	r30, 0x75	; 117
    15b4:	f9 4f       	sbci	r31, 0xF9	; 249
    15b6:	30 81       	ld	r19, Z
    15b8:	33 23       	and	r19, r19
    15ba:	79 f3       	breq	.-34     	; 0x159a <vTaskSwitchContext+0x1a>
    15bc:	ac 01       	movw	r20, r24
    15be:	44 0f       	add	r20, r20
    15c0:	55 1f       	adc	r21, r21
    15c2:	44 0f       	add	r20, r20
    15c4:	55 1f       	adc	r21, r21
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	48 0f       	add	r20, r24
    15cc:	59 1f       	adc	r21, r25
    15ce:	df 01       	movw	r26, r30
    15d0:	01 80       	ldd	r0, Z+1	; 0x01
    15d2:	f2 81       	ldd	r31, Z+2	; 0x02
    15d4:	e0 2d       	mov	r30, r0
    15d6:	02 80       	ldd	r0, Z+2	; 0x02
    15d8:	f3 81       	ldd	r31, Z+3	; 0x03
    15da:	e0 2d       	mov	r30, r0
    15dc:	12 96       	adiw	r26, 0x02	; 2
    15de:	fc 93       	st	X, r31
    15e0:	ee 93       	st	-X, r30
    15e2:	11 97       	sbiw	r26, 0x01	; 1
    15e4:	42 57       	subi	r20, 0x72	; 114
    15e6:	59 4f       	sbci	r21, 0xF9	; 249
    15e8:	e4 17       	cp	r30, r20
    15ea:	f5 07       	cpc	r31, r21
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <vTaskSwitchContext+0x78>
    15ee:	42 81       	ldd	r20, Z+2	; 0x02
    15f0:	53 81       	ldd	r21, Z+3	; 0x03
    15f2:	fd 01       	movw	r30, r26
    15f4:	52 83       	std	Z+2, r21	; 0x02
    15f6:	41 83       	std	Z+1, r20	; 0x01
    15f8:	fc 01       	movw	r30, r24
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	8e 0f       	add	r24, r30
    1608:	9f 1f       	adc	r25, r31
    160a:	fc 01       	movw	r30, r24
    160c:	e5 57       	subi	r30, 0x75	; 117
    160e:	f9 4f       	sbci	r31, 0xF9	; 249
    1610:	01 80       	ldd	r0, Z+1	; 0x01
    1612:	f2 81       	ldd	r31, Z+2	; 0x02
    1614:	e0 2d       	mov	r30, r0
    1616:	86 81       	ldd	r24, Z+6	; 0x06
    1618:	97 81       	ldd	r25, Z+7	; 0x07
    161a:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <pxCurrentTCB+0x1>
    161e:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <pxCurrentTCB>
    1622:	20 93 5e 06 	sts	0x065E, r18	; 0x80065e <uxTopReadyPriority>
    1626:	08 95       	ret

00001628 <vTaskPlaceOnEventList>:
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	eb 01       	movw	r28, r22
    162e:	60 91 af 06 	lds	r22, 0x06AF	; 0x8006af <pxCurrentTCB>
    1632:	70 91 b0 06 	lds	r23, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    1636:	64 5f       	subi	r22, 0xF4	; 244
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	0e 94 14 01 	call	0x228	; 0x228 <vListInsert>
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	ce 01       	movw	r24, r28
    1642:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prvAddCurrentTaskToDelayedList>
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <xTaskRemoveFromEventList>:
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	dc 01       	movw	r26, r24
    1652:	15 96       	adiw	r26, 0x05	; 5
    1654:	ed 91       	ld	r30, X+
    1656:	fc 91       	ld	r31, X
    1658:	16 97       	sbiw	r26, 0x06	; 6
    165a:	06 80       	ldd	r0, Z+6	; 0x06
    165c:	f7 81       	ldd	r31, Z+7	; 0x07
    165e:	e0 2d       	mov	r30, r0
    1660:	a4 89       	ldd	r26, Z+20	; 0x14
    1662:	b5 89       	ldd	r27, Z+21	; 0x15
    1664:	c6 85       	ldd	r28, Z+14	; 0x0e
    1666:	d7 85       	ldd	r29, Z+15	; 0x0f
    1668:	80 89       	ldd	r24, Z+16	; 0x10
    166a:	91 89       	ldd	r25, Z+17	; 0x11
    166c:	9d 83       	std	Y+5, r25	; 0x05
    166e:	8c 83       	std	Y+4, r24	; 0x04
    1670:	c0 89       	ldd	r28, Z+16	; 0x10
    1672:	d1 89       	ldd	r29, Z+17	; 0x11
    1674:	86 85       	ldd	r24, Z+14	; 0x0e
    1676:	97 85       	ldd	r25, Z+15	; 0x0f
    1678:	9b 83       	std	Y+3, r25	; 0x03
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	11 96       	adiw	r26, 0x01	; 1
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	12 97       	sbiw	r26, 0x02	; 2
    1684:	9f 01       	movw	r18, r30
    1686:	24 5f       	subi	r18, 0xF4	; 244
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	82 17       	cp	r24, r18
    168c:	93 07       	cpc	r25, r19
    168e:	31 f4       	brne	.+12     	; 0x169c <xTaskRemoveFromEventList+0x50>
    1690:	80 89       	ldd	r24, Z+16	; 0x10
    1692:	91 89       	ldd	r25, Z+17	; 0x11
    1694:	12 96       	adiw	r26, 0x02	; 2
    1696:	9c 93       	st	X, r25
    1698:	8e 93       	st	-X, r24
    169a:	11 97       	sbiw	r26, 0x01	; 1
    169c:	15 8a       	std	Z+21, r1	; 0x15
    169e:	14 8a       	std	Z+20, r1	; 0x14
    16a0:	8c 91       	ld	r24, X
    16a2:	81 50       	subi	r24, 0x01	; 1
    16a4:	8c 93       	st	X, r24
    16a6:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <uxSchedulerSuspended>
    16aa:	81 11       	cpse	r24, r1
    16ac:	60 c0       	rjmp	.+192    	; 0x176e <xTaskRemoveFromEventList+0x122>
    16ae:	a2 85       	ldd	r26, Z+10	; 0x0a
    16b0:	b3 85       	ldd	r27, Z+11	; 0x0b
    16b2:	c4 81       	ldd	r28, Z+4	; 0x04
    16b4:	d5 81       	ldd	r29, Z+5	; 0x05
    16b6:	86 81       	ldd	r24, Z+6	; 0x06
    16b8:	97 81       	ldd	r25, Z+7	; 0x07
    16ba:	9d 83       	std	Y+5, r25	; 0x05
    16bc:	8c 83       	std	Y+4, r24	; 0x04
    16be:	c6 81       	ldd	r28, Z+6	; 0x06
    16c0:	d7 81       	ldd	r29, Z+7	; 0x07
    16c2:	84 81       	ldd	r24, Z+4	; 0x04
    16c4:	95 81       	ldd	r25, Z+5	; 0x05
    16c6:	9b 83       	std	Y+3, r25	; 0x03
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	12 97       	sbiw	r26, 0x02	; 2
    16d2:	9f 01       	movw	r18, r30
    16d4:	2e 5f       	subi	r18, 0xFE	; 254
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	82 17       	cp	r24, r18
    16da:	93 07       	cpc	r25, r19
    16dc:	31 f4       	brne	.+12     	; 0x16ea <xTaskRemoveFromEventList+0x9e>
    16de:	86 81       	ldd	r24, Z+6	; 0x06
    16e0:	97 81       	ldd	r25, Z+7	; 0x07
    16e2:	12 96       	adiw	r26, 0x02	; 2
    16e4:	9c 93       	st	X, r25
    16e6:	8e 93       	st	-X, r24
    16e8:	11 97       	sbiw	r26, 0x01	; 1
    16ea:	13 86       	std	Z+11, r1	; 0x0b
    16ec:	12 86       	std	Z+10, r1	; 0x0a
    16ee:	8c 91       	ld	r24, X
    16f0:	81 50       	subi	r24, 0x01	; 1
    16f2:	8c 93       	st	X, r24
    16f4:	86 89       	ldd	r24, Z+22	; 0x16
    16f6:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <uxTopReadyPriority>
    16fa:	98 17       	cp	r25, r24
    16fc:	10 f4       	brcc	.+4      	; 0x1702 <xTaskRemoveFromEventList+0xb6>
    16fe:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxTopReadyPriority>
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	dc 01       	movw	r26, r24
    1706:	aa 0f       	add	r26, r26
    1708:	bb 1f       	adc	r27, r27
    170a:	aa 0f       	add	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	aa 0f       	add	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	8a 0f       	add	r24, r26
    1714:	9b 1f       	adc	r25, r27
    1716:	dc 01       	movw	r26, r24
    1718:	a5 57       	subi	r26, 0x75	; 117
    171a:	b9 4f       	sbci	r27, 0xF9	; 249
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	0d 90       	ld	r0, X+
    1720:	bc 91       	ld	r27, X
    1722:	a0 2d       	mov	r26, r0
    1724:	b5 83       	std	Z+5, r27	; 0x05
    1726:	a4 83       	std	Z+4, r26	; 0x04
    1728:	14 96       	adiw	r26, 0x04	; 4
    172a:	8d 91       	ld	r24, X+
    172c:	9c 91       	ld	r25, X
    172e:	15 97       	sbiw	r26, 0x05	; 5
    1730:	97 83       	std	Z+7, r25	; 0x07
    1732:	86 83       	std	Z+6, r24	; 0x06
    1734:	14 96       	adiw	r26, 0x04	; 4
    1736:	cd 91       	ld	r28, X+
    1738:	dc 91       	ld	r29, X
    173a:	15 97       	sbiw	r26, 0x05	; 5
    173c:	3b 83       	std	Y+3, r19	; 0x03
    173e:	2a 83       	std	Y+2, r18	; 0x02
    1740:	15 96       	adiw	r26, 0x05	; 5
    1742:	3c 93       	st	X, r19
    1744:	2e 93       	st	-X, r18
    1746:	14 97       	sbiw	r26, 0x04	; 4
    1748:	a6 89       	ldd	r26, Z+22	; 0x16
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	cd 01       	movw	r24, r26
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	a8 0f       	add	r26, r24
    175c:	b9 1f       	adc	r27, r25
    175e:	a5 57       	subi	r26, 0x75	; 117
    1760:	b9 4f       	sbci	r27, 0xF9	; 249
    1762:	b3 87       	std	Z+11, r27	; 0x0b
    1764:	a2 87       	std	Z+10, r26	; 0x0a
    1766:	8c 91       	ld	r24, X
    1768:	8f 5f       	subi	r24, 0xFF	; 255
    176a:	8c 93       	st	X, r24
    176c:	1c c0       	rjmp	.+56     	; 0x17a6 <xTaskRemoveFromEventList+0x15a>
    176e:	4c e6       	ldi	r20, 0x6C	; 108
    1770:	56 e0       	ldi	r21, 0x06	; 6
    1772:	da 01       	movw	r26, r20
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	cd 91       	ld	r28, X+
    1778:	dc 91       	ld	r29, X
    177a:	12 97       	sbiw	r26, 0x02	; 2
    177c:	d7 87       	std	Z+15, r29	; 0x0f
    177e:	c6 87       	std	Z+14, r28	; 0x0e
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	91 8b       	std	Z+17, r25	; 0x11
    1786:	80 8b       	std	Z+16, r24	; 0x10
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	9d 81       	ldd	r25, Y+5	; 0x05
    178c:	dc 01       	movw	r26, r24
    178e:	13 96       	adiw	r26, 0x03	; 3
    1790:	3c 93       	st	X, r19
    1792:	2e 93       	st	-X, r18
    1794:	12 97       	sbiw	r26, 0x02	; 2
    1796:	3d 83       	std	Y+5, r19	; 0x05
    1798:	2c 83       	std	Y+4, r18	; 0x04
    179a:	55 8b       	std	Z+21, r21	; 0x15
    179c:	44 8b       	std	Z+20, r20	; 0x14
    179e:	da 01       	movw	r26, r20
    17a0:	8c 91       	ld	r24, X
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	8c 93       	st	X, r24
    17a6:	96 89       	ldd	r25, Z+22	; 0x16
    17a8:	e0 91 af 06 	lds	r30, 0x06AF	; 0x8006af <pxCurrentTCB>
    17ac:	f0 91 b0 06 	lds	r31, 0x06B0	; 0x8006b0 <pxCurrentTCB+0x1>
    17b0:	86 89       	ldd	r24, Z+22	; 0x16
    17b2:	89 17       	cp	r24, r25
    17b4:	20 f4       	brcc	.+8      	; 0x17be <xTaskRemoveFromEventList+0x172>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xYieldPending>
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <xTaskRemoveFromEventList+0x174>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    17c6:	20 91 59 06 	lds	r18, 0x0659	; 0x800659 <xNumOfOverflows>
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    17ce:	20 91 5f 06 	lds	r18, 0x065F	; 0x80065f <xTickCount>
    17d2:	30 91 60 06 	lds	r19, 0x0660	; 0x800660 <xTickCount+0x1>
    17d6:	32 83       	std	Z+2, r19	; 0x02
    17d8:	21 83       	std	Z+1, r18	; 0x01
    17da:	08 95       	ret

000017dc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    17e6:	40 91 5f 06 	lds	r20, 0x065F	; 0x80065f <xTickCount>
    17ea:	50 91 60 06 	lds	r21, 0x0660	; 0x800660 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    17ee:	ec 01       	movw	r28, r24
    17f0:	29 81       	ldd	r18, Y+1	; 0x01
    17f2:	3a 81       	ldd	r19, Y+2	; 0x02
    17f4:	da 01       	movw	r26, r20
    17f6:	a2 1b       	sub	r26, r18
    17f8:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    17fa:	f8 81       	ld	r31, Y
    17fc:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <xNumOfOverflows>
    1800:	fe 17       	cp	r31, r30
    1802:	41 f0       	breq	.+16     	; 0x1814 <xTaskCheckForTimeOut+0x38>
    1804:	42 17       	cp	r20, r18
    1806:	53 07       	cpc	r21, r19
    1808:	28 f0       	brcs	.+10     	; 0x1814 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    180a:	fb 01       	movw	r30, r22
    180c:	11 82       	std	Z+1, r1	; 0x01
    180e:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1810:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1812:	11 c0       	rjmp	.+34     	; 0x1836 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1814:	eb 01       	movw	r28, r22
    1816:	28 81       	ld	r18, Y
    1818:	39 81       	ldd	r19, Y+1	; 0x01
    181a:	a2 17       	cp	r26, r18
    181c:	b3 07       	cpc	r27, r19
    181e:	40 f4       	brcc	.+16     	; 0x1830 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1820:	2a 1b       	sub	r18, r26
    1822:	3b 0b       	sbc	r19, r27
    1824:	39 83       	std	Y+1, r19	; 0x01
    1826:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1828:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1834:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xYieldPending>
    1846:	08 95       	ret

00001848 <LCD_ENABLE_PULSE>:
}

void LCD_clear_screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
	_delay_ms(2);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	62 e0       	ldi	r22, 0x02	; 2
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	8a 95       	dec	r24
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_ENABLE_PULSE+0xc>
    1858:	00 00       	nop
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
    1864:	08 95       	ret

00001866 <LCD_WRITE_COMMAND>:
    1866:	cf 93       	push	r28
    1868:	c8 2f       	mov	r28, r24
    186a:	68 2f       	mov	r22, r24
    186c:	60 7f       	andi	r22, 0xF0	; 240
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <DIO_vWritePortValue>
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
    187e:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_ENABLE_PULSE>
    1882:	8f e1       	ldi	r24, 0x1F	; 31
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <LCD_WRITE_COMMAND+0x20>
    188a:	00 c0       	rjmp	.+0      	; 0x188c <LCD_WRITE_COMMAND+0x26>
    188c:	00 00       	nop
    188e:	6c 2f       	mov	r22, r28
    1890:	62 95       	swap	r22
    1892:	60 7f       	andi	r22, 0xF0	; 240
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <DIO_vWritePortValue>
    189a:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_ENABLE_PULSE>
    189e:	8f e3       	ldi	r24, 0x3F	; 63
    18a0:	9f e1       	ldi	r25, 0x1F	; 31
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_WRITE_COMMAND+0x3c>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <LCD_WRITE_COMMAND+0x42>
    18a8:	00 00       	nop
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <LCD_INIT>:



void LCD_INIT(){

	DIO_vSetPortDirection(LCD_DATA_PORT,OUTPUT); //set data port direction to output
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_vSetPortDirection>
	DIO_vSetPinDirection(LCD_CONTROL_PORT,RS_SWITCH,OUTPUT); //set RS  output
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_CONTROL_PORT,ENABLE_SWITCH,OUTPUT); //set ENABLE to output
    18c0:	42 e0       	ldi	r20, 0x02	; 2
    18c2:	62 e0       	ldi	r22, 0x02	; 2
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_vSetPinDirection>
	//DIO_vSetPinDirection(LCD_CONTROL_PORT,RW_SWITCH,OUTPUT); //set ENABLE to output
	DIO_vWritePin(LCD_CONTROL_PORT, ENABLE_SWITCH, LOW);
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	62 e0       	ldi	r22, 0x02	; 2
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18d4:	2f ef       	ldi	r18, 0xFF	; 255
    18d6:	83 ef       	ldi	r24, 0xF3	; 243
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	21 50       	subi	r18, 0x01	; 1
    18dc:	80 40       	sbci	r24, 0x00	; 0
    18de:	90 40       	sbci	r25, 0x00	; 0
    18e0:	e1 f7       	brne	.-8      	; 0x18da <LCD_INIT+0x2c>
    18e2:	00 c0       	rjmp	.+0      	; 0x18e4 <LCD_INIT+0x36>
    18e4:	00 00       	nop
	//LCD_WRITE_COMMAND(0x32);
	//LCD_WRITE_COMMAND(0x20);
	//LCD_WRITE_COMMAND(0x0E); // 2 line, 5*7 matrix in 4-bit mode
	//LCD_WRITE_COMMAND(0x06); // Display the cursor blinking
	//LCD_WRITE_COMMAND(0x01); // clear the screen
	LCD_WRITE_COMMAND(0x02);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x28);
    18ec:	88 e2       	ldi	r24, 0x28	; 40
    18ee:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x0c);
    18f2:	8c e0       	ldi	r24, 0x0C	; 12
    18f4:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_WRITE_COMMAND>
    18f8:	8f e3       	ldi	r24, 0x3F	; 63
    18fa:	9f e1       	ldi	r25, 0x1F	; 31
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_INIT+0x4e>
    1900:	00 c0       	rjmp	.+0      	; 0x1902 <LCD_INIT+0x54>
    1902:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0x06);
    1904:	86 e0       	ldi	r24, 0x06	; 6
    1906:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x01);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_WRITE_COMMAND>
    1910:	08 95       	ret

00001912 <LCD_WRITE_CHAR>:
}




void LCD_WRITE_CHAR(uint8 character){
    1912:	cf 93       	push	r28
    1914:	c8 2f       	mov	r28, r24
	DIO_vWritePortValue(LCD_DATA_PORT,((LCD_DATA_PORT	& 0x0F)|(character & 0xF0))); //sending the upper nibble
    1916:	68 2f       	mov	r22, r24
    1918:	60 7f       	andi	r22, 0xF0	; 240
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <DIO_vWritePortValue>
	DIO_vWritePin(LCD_CONTROL_PORT,RS_SWITCH,HIGH); //RS = HIGH ,writing on data port of lcd
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <DIO_vWritePin>
	LCD_ENABLE_PULSE(); //enable pulse
    192a:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_ENABLE_PULSE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    192e:	8f e1       	ldi	r24, 0x1F	; 31
    1930:	93 e0       	ldi	r25, 0x03	; 3
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_WRITE_CHAR+0x20>
    1936:	00 c0       	rjmp	.+0      	; 0x1938 <LCD_WRITE_CHAR+0x26>
    1938:	00 00       	nop
	_delay_us(200);
	DIO_vWritePortValue(LCD_DATA_PORT,((LCD_DATA_PORT	& 0x0F)|(character <<4))); //sending the lower nibble
    193a:	6c 2f       	mov	r22, r28
    193c:	62 95       	swap	r22
    193e:	60 7f       	andi	r22, 0xF0	; 240
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <DIO_vWritePortValue>
	LCD_ENABLE_PULSE(); //enable pulse
    1946:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_ENABLE_PULSE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    194a:	8f e3       	ldi	r24, 0x3F	; 63
    194c:	9f e1       	ldi	r25, 0x1F	; 31
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_WRITE_CHAR+0x3c>
    1952:	00 c0       	rjmp	.+0      	; 0x1954 <LCD_WRITE_CHAR+0x42>
    1954:	00 00       	nop
	_delay_ms(2);
}
    1956:	cf 91       	pop	r28
    1958:	08 95       	ret

0000195a <main>:

#include "APP/APP.h"
int main(void)
{
	
	INIT();
    195a:	0e 94 a4 00 	call	0x148	; 0x148 <INIT>
	//Create_Semaphore_Task_ADC();
	Create_Semaphore_Task_Uart();
    195e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Create_Semaphore_Task_Uart>
	vTaskStartScheduler();
    1962:	0e 94 89 08 	call	0x1112	; 0x1112 <vTaskStartScheduler>
    1966:	ff cf       	rjmp	.-2      	; 0x1966 <main+0xc>

00001968 <ADC_INIT>:
}
void ADC_START_COV(){
	//choosing the channel number 0 
	ADMUX_REG |=0;
	//starting conversion
	SET_BIT(ADCSRA_REG,ADSC);
    1968:	9a b3       	in	r25, 0x1a	; 26
    196a:	21 e0       	ldi	r18, 0x01	; 1
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <ADC_INIT+0xc>
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	8a 95       	dec	r24
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <ADC_INIT+0x8>
    1978:	20 95       	com	r18
    197a:	29 23       	and	r18, r25
    197c:	2a bb       	out	0x1a, r18	; 26
    197e:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <ADC_Config+0x1>
    1982:	81 11       	cpse	r24, r1
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <ADC_INIT+0x2c>
    1986:	87 b1       	in	r24, 0x07	; 7
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	87 b9       	out	0x07, r24	; 7
    198c:	87 b1       	in	r24, 0x07	; 7
    198e:	8f 77       	andi	r24, 0x7F	; 127
    1990:	87 b9       	out	0x07, r24	; 7
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <ADC_INIT+0x3c>
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	31 f4       	brne	.+12     	; 0x19a4 <ADC_INIT+0x3c>
    1998:	87 b1       	in	r24, 0x07	; 7
    199a:	8f 7b       	andi	r24, 0xBF	; 191
    199c:	87 b9       	out	0x07, r24	; 7
    199e:	87 b1       	in	r24, 0x07	; 7
    19a0:	8f 77       	andi	r24, 0x7F	; 127
    19a2:	87 b9       	out	0x07, r24	; 7
    19a4:	96 b1       	in	r25, 0x06	; 6
    19a6:	e3 eb       	ldi	r30, 0xB3	; 179
    19a8:	f6 e0       	ldi	r31, 0x06	; 6
    19aa:	80 81       	ld	r24, Z
    19ac:	89 2b       	or	r24, r25
    19ae:	86 b9       	out	0x06, r24	; 6
    19b0:	86 b1       	in	r24, 0x06	; 6
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	86 b9       	out	0x06, r24	; 6
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	21 f4       	brne	.+8      	; 0x19c4 <ADC_INIT+0x5c>
    19bc:	87 b1       	in	r24, 0x07	; 7
    19be:	80 62       	ori	r24, 0x20	; 32
    19c0:	87 b9       	out	0x07, r24	; 7
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <ADC_INIT+0x66>
    19c4:	81 11       	cpse	r24, r1
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <ADC_INIT+0x66>
    19c8:	87 b1       	in	r24, 0x07	; 7
    19ca:	8f 7d       	andi	r24, 0xDF	; 223
    19cc:	87 b9       	out	0x07, r24	; 7
    19ce:	8f b7       	in	r24, 0x3f	; 63
    19d0:	80 68       	ori	r24, 0x80	; 128
    19d2:	8f bf       	out	0x3f, r24	; 63
    19d4:	86 b1       	in	r24, 0x06	; 6
    19d6:	88 60       	ori	r24, 0x08	; 8
    19d8:	86 b9       	out	0x06, r24	; 6
    19da:	08 95       	ret

000019dc <ADC_Set_Callback>:

//global callback pointer
ADC_callback_t ADC_callback_ptr = NULL ;
//setting the callback function 
void ADC_Set_Callback(ADC_callback_t ptr){
	if(ptr != NULL){
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	21 f0       	breq	.+8      	; 0x19e8 <ADC_Set_Callback+0xc>
		ADC_callback_ptr = ptr;
    19e0:	90 93 b2 06 	sts	0x06B2, r25	; 0x8006b2 <ADC_callback_ptr+0x1>
    19e4:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <ADC_callback_ptr>
    19e8:	08 95       	ret

000019ea <__vector_16>:
	}
}
//ISR of ADC
ISR(ADC_INT){
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
	
	uint16 data = 0;
	data  = ADC_DATA_REGISTER;
    1a0c:	84 b1       	in	r24, 0x04	; 4
    1a0e:	95 b1       	in	r25, 0x05	; 5
	ADC_callback_ptr(data);
    1a10:	e0 91 b1 06 	lds	r30, 0x06B1	; 0x8006b1 <ADC_callback_ptr>
    1a14:	f0 91 b2 06 	lds	r31, 0x06B2	; 0x8006b2 <ADC_callback_ptr+0x1>
    1a18:	09 95       	icall
	
    1a1a:	ff 91       	pop	r31
    1a1c:	ef 91       	pop	r30
    1a1e:	bf 91       	pop	r27
    1a20:	af 91       	pop	r26
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	7f 91       	pop	r23
    1a28:	6f 91       	pop	r22
    1a2a:	5f 91       	pop	r21
    1a2c:	4f 91       	pop	r20
    1a2e:	3f 91       	pop	r19
    1a30:	2f 91       	pop	r18
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	0f 90       	pop	r0
    1a38:	1f 90       	pop	r1
    1a3a:	18 95       	reti

00001a3c <DIO_vSetPinDirection>:
			TOGGLE_BIT(PORTD_BASE->Port ,PIN2);
			TOGGLE_BIT(PORTD_BASE->Port ,PIN3);
			TOGGLE_BIT(PORTD_BASE->Port ,PIN4);
			TOGGLE_BIT(PORTD_BASE->Port ,PIN5);
			TOGGLE_BIT(PORTD_BASE->Port ,PIN6);
			TOGGLE_BIT(PORTD_BASE->Port ,PIN7);
    1a3c:	68 30       	cpi	r22, 0x08	; 8
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <DIO_vSetPinDirection+0x6>
    1a40:	c0 c0       	rjmp	.+384    	; 0x1bc2 <DIO_vSetPinDirection+0x186>
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <DIO_vSetPinDirection+0xc>
    1a46:	bd c0       	rjmp	.+378    	; 0x1bc2 <DIO_vSetPinDirection+0x186>
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	a9 f1       	breq	.+106    	; 0x1ab6 <DIO_vSetPinDirection+0x7a>
    1a4c:	38 f0       	brcs	.+14     	; 0x1a5c <DIO_vSetPinDirection+0x20>
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <DIO_vSetPinDirection+0x18>
    1a52:	5e c0       	rjmp	.+188    	; 0x1b10 <DIO_vSetPinDirection+0xd4>
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <DIO_vSetPinDirection+0x1e>
    1a58:	88 c0       	rjmp	.+272    	; 0x1b6a <DIO_vSetPinDirection+0x12e>
    1a5a:	08 95       	ret
    1a5c:	42 30       	cpi	r20, 0x02	; 2
    1a5e:	59 f4       	brne	.+22     	; 0x1a76 <DIO_vSetPinDirection+0x3a>
    1a60:	2a b3       	in	r18, 0x1a	; 26
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_vSetPinDirection+0x30>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	6a 95       	dec	r22
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_vSetPinDirection+0x2c>
    1a70:	82 2b       	or	r24, r18
    1a72:	8a bb       	out	0x1a, r24	; 26
    1a74:	08 95       	ret
    1a76:	41 30       	cpi	r20, 0x01	; 1
    1a78:	61 f4       	brne	.+24     	; 0x1a92 <DIO_vSetPinDirection+0x56>
    1a7a:	2a b3       	in	r18, 0x1a	; 26
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_vSetPinDirection+0x4a>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	6a 95       	dec	r22
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_vSetPinDirection+0x46>
    1a8a:	80 95       	com	r24
    1a8c:	82 23       	and	r24, r18
    1a8e:	8a bb       	out	0x1a, r24	; 26
    1a90:	08 95       	ret
    1a92:	41 11       	cpse	r20, r1
    1a94:	96 c0       	rjmp	.+300    	; 0x1bc2 <DIO_vSetPinDirection+0x186>
    1a96:	2a b3       	in	r18, 0x1a	; 26
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_vSetPinDirection+0x66>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	6a 95       	dec	r22
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_vSetPinDirection+0x62>
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	90 95       	com	r25
    1aaa:	92 23       	and	r25, r18
    1aac:	9a bb       	out	0x1a, r25	; 26
    1aae:	9b b3       	in	r25, 0x1b	; 27
    1ab0:	89 2b       	or	r24, r25
    1ab2:	8b bb       	out	0x1b, r24	; 27
    1ab4:	08 95       	ret
    1ab6:	42 30       	cpi	r20, 0x02	; 2
    1ab8:	59 f4       	brne	.+22     	; 0x1ad0 <DIO_vSetPinDirection+0x94>
    1aba:	27 b3       	in	r18, 0x17	; 23
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_vSetPinDirection+0x8a>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	6a 95       	dec	r22
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_vSetPinDirection+0x86>
    1aca:	82 2b       	or	r24, r18
    1acc:	87 bb       	out	0x17, r24	; 23
    1ace:	08 95       	ret
    1ad0:	41 30       	cpi	r20, 0x01	; 1
    1ad2:	61 f4       	brne	.+24     	; 0x1aec <DIO_vSetPinDirection+0xb0>
    1ad4:	27 b3       	in	r18, 0x17	; 23
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_vSetPinDirection+0xa4>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	6a 95       	dec	r22
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_vSetPinDirection+0xa0>
    1ae4:	80 95       	com	r24
    1ae6:	82 23       	and	r24, r18
    1ae8:	87 bb       	out	0x17, r24	; 23
    1aea:	08 95       	ret
    1aec:	41 11       	cpse	r20, r1
    1aee:	69 c0       	rjmp	.+210    	; 0x1bc2 <DIO_vSetPinDirection+0x186>
    1af0:	27 b3       	in	r18, 0x17	; 23
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_vSetPinDirection+0xc0>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	6a 95       	dec	r22
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_vSetPinDirection+0xbc>
    1b00:	98 2f       	mov	r25, r24
    1b02:	90 95       	com	r25
    1b04:	92 23       	and	r25, r18
    1b06:	97 bb       	out	0x17, r25	; 23
    1b08:	98 b3       	in	r25, 0x18	; 24
    1b0a:	89 2b       	or	r24, r25
    1b0c:	88 bb       	out	0x18, r24	; 24
    1b0e:	08 95       	ret
    1b10:	42 30       	cpi	r20, 0x02	; 2
    1b12:	59 f4       	brne	.+22     	; 0x1b2a <DIO_vSetPinDirection+0xee>
    1b14:	24 b3       	in	r18, 0x14	; 20
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <DIO_vSetPinDirection+0xe4>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	6a 95       	dec	r22
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <DIO_vSetPinDirection+0xe0>
    1b24:	82 2b       	or	r24, r18
    1b26:	84 bb       	out	0x14, r24	; 20
    1b28:	08 95       	ret
    1b2a:	41 30       	cpi	r20, 0x01	; 1
    1b2c:	61 f4       	brne	.+24     	; 0x1b46 <DIO_vSetPinDirection+0x10a>
    1b2e:	24 b3       	in	r18, 0x14	; 20
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_vSetPinDirection+0xfe>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	6a 95       	dec	r22
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_vSetPinDirection+0xfa>
    1b3e:	80 95       	com	r24
    1b40:	82 23       	and	r24, r18
    1b42:	84 bb       	out	0x14, r24	; 20
    1b44:	08 95       	ret
    1b46:	41 11       	cpse	r20, r1
    1b48:	3c c0       	rjmp	.+120    	; 0x1bc2 <DIO_vSetPinDirection+0x186>
    1b4a:	24 b3       	in	r18, 0x14	; 20
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_vSetPinDirection+0x11a>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	6a 95       	dec	r22
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <DIO_vSetPinDirection+0x116>
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	90 95       	com	r25
    1b5e:	92 23       	and	r25, r18
    1b60:	94 bb       	out	0x14, r25	; 20
    1b62:	95 b3       	in	r25, 0x15	; 21
    1b64:	89 2b       	or	r24, r25
    1b66:	85 bb       	out	0x15, r24	; 21
    1b68:	08 95       	ret
    1b6a:	42 30       	cpi	r20, 0x02	; 2
    1b6c:	59 f4       	brne	.+22     	; 0x1b84 <DIO_vSetPinDirection+0x148>
    1b6e:	21 b3       	in	r18, 0x11	; 17
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_vSetPinDirection+0x13e>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	6a 95       	dec	r22
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <DIO_vSetPinDirection+0x13a>
    1b7e:	82 2b       	or	r24, r18
    1b80:	81 bb       	out	0x11, r24	; 17
    1b82:	08 95       	ret
    1b84:	41 30       	cpi	r20, 0x01	; 1
    1b86:	61 f4       	brne	.+24     	; 0x1ba0 <DIO_vSetPinDirection+0x164>
    1b88:	21 b3       	in	r18, 0x11	; 17
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_vSetPinDirection+0x158>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	6a 95       	dec	r22
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_vSetPinDirection+0x154>
    1b98:	80 95       	com	r24
    1b9a:	82 23       	and	r24, r18
    1b9c:	81 bb       	out	0x11, r24	; 17
    1b9e:	08 95       	ret
    1ba0:	41 11       	cpse	r20, r1
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <DIO_vSetPinDirection+0x186>
    1ba4:	21 b3       	in	r18, 0x11	; 17
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <DIO_vSetPinDirection+0x174>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	6a 95       	dec	r22
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <DIO_vSetPinDirection+0x170>
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	90 95       	com	r25
    1bb8:	92 23       	and	r25, r18
    1bba:	91 bb       	out	0x11, r25	; 17
    1bbc:	92 b3       	in	r25, 0x12	; 18
    1bbe:	89 2b       	or	r24, r25
    1bc0:	82 bb       	out	0x12, r24	; 18
    1bc2:	08 95       	ret

00001bc4 <DIO_vWritePin>:
    1bc4:	68 30       	cpi	r22, 0x08	; 8
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <DIO_vWritePin+0x6>
    1bc8:	6f c0       	rjmp	.+222    	; 0x1ca8 <DIO_vWritePin+0xe4>
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <DIO_vWritePin+0xc>
    1bce:	6c c0       	rjmp	.+216    	; 0x1ca8 <DIO_vWritePin+0xe4>
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	01 f1       	breq	.+64     	; 0x1c14 <DIO_vWritePin+0x50>
    1bd4:	30 f0       	brcs	.+12     	; 0x1be2 <DIO_vWritePin+0x1e>
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	b1 f1       	breq	.+108    	; 0x1c46 <DIO_vWritePin+0x82>
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <DIO_vWritePin+0x1c>
    1bde:	4c c0       	rjmp	.+152    	; 0x1c78 <DIO_vWritePin+0xb4>
    1be0:	08 95       	ret
    1be2:	41 30       	cpi	r20, 0x01	; 1
    1be4:	59 f4       	brne	.+22     	; 0x1bfc <DIO_vWritePin+0x38>
    1be6:	2b b3       	in	r18, 0x1b	; 27
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_vWritePin+0x2e>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	6a 95       	dec	r22
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_vWritePin+0x2a>
    1bf6:	82 2b       	or	r24, r18
    1bf8:	8b bb       	out	0x1b, r24	; 27
    1bfa:	08 95       	ret
    1bfc:	2b b3       	in	r18, 0x1b	; 27
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <DIO_vWritePin+0x44>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	6a 95       	dec	r22
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <DIO_vWritePin+0x40>
    1c0c:	80 95       	com	r24
    1c0e:	82 23       	and	r24, r18
    1c10:	8b bb       	out	0x1b, r24	; 27
    1c12:	08 95       	ret
    1c14:	41 30       	cpi	r20, 0x01	; 1
    1c16:	59 f4       	brne	.+22     	; 0x1c2e <DIO_vWritePin+0x6a>
    1c18:	28 b3       	in	r18, 0x18	; 24
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_vWritePin+0x60>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	6a 95       	dec	r22
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_vWritePin+0x5c>
    1c28:	82 2b       	or	r24, r18
    1c2a:	88 bb       	out	0x18, r24	; 24
    1c2c:	08 95       	ret
    1c2e:	28 b3       	in	r18, 0x18	; 24
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_vWritePin+0x76>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	6a 95       	dec	r22
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_vWritePin+0x72>
    1c3e:	80 95       	com	r24
    1c40:	82 23       	and	r24, r18
    1c42:	88 bb       	out	0x18, r24	; 24
    1c44:	08 95       	ret
    1c46:	41 30       	cpi	r20, 0x01	; 1
    1c48:	59 f4       	brne	.+22     	; 0x1c60 <DIO_vWritePin+0x9c>
    1c4a:	25 b3       	in	r18, 0x15	; 21
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_vWritePin+0x92>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	6a 95       	dec	r22
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_vWritePin+0x8e>
    1c5a:	82 2b       	or	r24, r18
    1c5c:	85 bb       	out	0x15, r24	; 21
    1c5e:	08 95       	ret
    1c60:	25 b3       	in	r18, 0x15	; 21
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_vWritePin+0xa8>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	6a 95       	dec	r22
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_vWritePin+0xa4>
    1c70:	80 95       	com	r24
    1c72:	82 23       	and	r24, r18
    1c74:	85 bb       	out	0x15, r24	; 21
    1c76:	08 95       	ret
    1c78:	41 30       	cpi	r20, 0x01	; 1
    1c7a:	59 f4       	brne	.+22     	; 0x1c92 <DIO_vWritePin+0xce>
    1c7c:	22 b3       	in	r18, 0x12	; 18
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <DIO_vWritePin+0xc4>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	6a 95       	dec	r22
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <DIO_vWritePin+0xc0>
    1c8c:	82 2b       	or	r24, r18
    1c8e:	82 bb       	out	0x12, r24	; 18
    1c90:	08 95       	ret
    1c92:	22 b3       	in	r18, 0x12	; 18
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_vWritePin+0xda>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	6a 95       	dec	r22
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_vWritePin+0xd6>
    1ca2:	80 95       	com	r24
    1ca4:	82 23       	and	r24, r18
    1ca6:	82 bb       	out	0x12, r24	; 18
    1ca8:	08 95       	ret

00001caa <DIO_vSetPortDirection>:
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	a9 f0       	breq	.+42     	; 0x1cd8 <DIO_vSetPortDirection+0x2e>
    1cae:	28 f0       	brcs	.+10     	; 0x1cba <DIO_vSetPortDirection+0x10>
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	09 f1       	breq	.+66     	; 0x1cf6 <DIO_vSetPortDirection+0x4c>
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	71 f1       	breq	.+92     	; 0x1d14 <DIO_vSetPortDirection+0x6a>
    1cb8:	08 95       	ret
    1cba:	62 30       	cpi	r22, 0x02	; 2
    1cbc:	19 f4       	brne	.+6      	; 0x1cc4 <DIO_vSetPortDirection+0x1a>
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	8a bb       	out	0x1a, r24	; 26
    1cc2:	08 95       	ret
    1cc4:	61 11       	cpse	r22, r1
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <DIO_vSetPortDirection+0x26>
    1cc8:	1a ba       	out	0x1a, r1	; 26
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	8b bb       	out	0x1b, r24	; 27
    1cce:	08 95       	ret
    1cd0:	61 30       	cpi	r22, 0x01	; 1
    1cd2:	71 f5       	brne	.+92     	; 0x1d30 <DIO_vSetPortDirection+0x86>
    1cd4:	1a ba       	out	0x1a, r1	; 26
    1cd6:	08 95       	ret
    1cd8:	62 30       	cpi	r22, 0x02	; 2
    1cda:	19 f4       	brne	.+6      	; 0x1ce2 <DIO_vSetPortDirection+0x38>
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	87 bb       	out	0x17, r24	; 23
    1ce0:	08 95       	ret
    1ce2:	61 11       	cpse	r22, r1
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <DIO_vSetPortDirection+0x44>
    1ce6:	17 ba       	out	0x17, r1	; 23
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	88 bb       	out	0x18, r24	; 24
    1cec:	08 95       	ret
    1cee:	61 30       	cpi	r22, 0x01	; 1
    1cf0:	f9 f4       	brne	.+62     	; 0x1d30 <DIO_vSetPortDirection+0x86>
    1cf2:	17 ba       	out	0x17, r1	; 23
    1cf4:	08 95       	ret
    1cf6:	62 30       	cpi	r22, 0x02	; 2
    1cf8:	19 f4       	brne	.+6      	; 0x1d00 <DIO_vSetPortDirection+0x56>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	84 bb       	out	0x14, r24	; 20
    1cfe:	08 95       	ret
    1d00:	61 11       	cpse	r22, r1
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <DIO_vSetPortDirection+0x62>
    1d04:	14 ba       	out	0x14, r1	; 20
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	85 bb       	out	0x15, r24	; 21
    1d0a:	08 95       	ret
    1d0c:	61 30       	cpi	r22, 0x01	; 1
    1d0e:	81 f4       	brne	.+32     	; 0x1d30 <DIO_vSetPortDirection+0x86>
    1d10:	14 ba       	out	0x14, r1	; 20
    1d12:	08 95       	ret
    1d14:	62 30       	cpi	r22, 0x02	; 2
    1d16:	19 f4       	brne	.+6      	; 0x1d1e <DIO_vSetPortDirection+0x74>
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	81 bb       	out	0x11, r24	; 17
    1d1c:	08 95       	ret
    1d1e:	61 11       	cpse	r22, r1
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <DIO_vSetPortDirection+0x80>
    1d22:	11 ba       	out	0x11, r1	; 17
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	82 bb       	out	0x12, r24	; 18
    1d28:	08 95       	ret
    1d2a:	61 30       	cpi	r22, 0x01	; 1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <DIO_vSetPortDirection+0x86>
    1d2e:	11 ba       	out	0x11, r1	; 17
    1d30:	08 95       	ret

00001d32 <DIO_vWritePortValue>:
	}
}


void DIO_vWritePortValue(uint8 Copy_u8PORT, uint8 Copy_u8value) {
	switch (Copy_u8PORT) {
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	41 f0       	breq	.+16     	; 0x1d46 <DIO_vWritePortValue+0x14>
    1d36:	28 f0       	brcs	.+10     	; 0x1d42 <DIO_vWritePortValue+0x10>
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	39 f0       	breq	.+14     	; 0x1d4a <DIO_vWritePortValue+0x18>
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	39 f0       	breq	.+14     	; 0x1d4e <DIO_vWritePortValue+0x1c>
    1d40:	08 95       	ret
		case PORT_A: //PORTA
		PORTA_BASE->Port = Copy_u8value;
    1d42:	6b bb       	out	0x1b, r22	; 27
		break;
    1d44:	08 95       	ret
		
		case PORT_B: //PORTB
		PORTB_BASE->Port = Copy_u8value;
    1d46:	68 bb       	out	0x18, r22	; 24
		break;
    1d48:	08 95       	ret
		
		case PORT_C: //PORTC
		PORTC_BASE->Port = Copy_u8value;
    1d4a:	65 bb       	out	0x15, r22	; 21
		break;
    1d4c:	08 95       	ret
		
		case PORT_D: //PORTD
		PORTD_BASE->Port = Copy_u8value;
    1d4e:	62 bb       	out	0x12, r22	; 18
    1d50:	08 95       	ret

00001d52 <UART_INIT>:
		}else{
			CLEAR_BIT(data,8);
		}
	}
	return UDR_REG;
}
    1d52:	86 e0       	ldi	r24, 0x06	; 6
    1d54:	80 bd       	out	0x20, r24	; 32
    1d56:	81 e8       	ldi	r24, 0x81	; 129
    1d58:	89 b9       	out	0x09, r24	; 9
    1d5a:	8b b1       	in	r24, 0x0b	; 11
    1d5c:	82 60       	ori	r24, 0x02	; 2
    1d5e:	8b b9       	out	0x0b, r24	; 11
    1d60:	8a b1       	in	r24, 0x0a	; 10
    1d62:	8b 7f       	andi	r24, 0xFB	; 251
    1d64:	8a b9       	out	0x0a, r24	; 10
    1d66:	8f b7       	in	r24, 0x3f	; 63
    1d68:	80 68       	ori	r24, 0x80	; 128
    1d6a:	8f bf       	out	0x3f, r24	; 63
    1d6c:	8a b1       	in	r24, 0x0a	; 10
    1d6e:	80 68       	ori	r24, 0x80	; 128
    1d70:	8a b9       	out	0x0a, r24	; 10
    1d72:	8a b1       	in	r24, 0x0a	; 10
    1d74:	80 61       	ori	r24, 0x10	; 16
    1d76:	8a b9       	out	0x0a, r24	; 10
    1d78:	8a b1       	in	r24, 0x0a	; 10
    1d7a:	88 60       	ori	r24, 0x08	; 8
    1d7c:	8a b9       	out	0x0a, r24	; 10
    1d7e:	86 e8       	ldi	r24, 0x86	; 134
    1d80:	80 bd       	out	0x20, r24	; 32
    1d82:	08 95       	ret

00001d84 <Uart_set_callback>:

//global callback pointer 
RXC_callback_t  RXC_callback_ptr = NULL;
//callback function setting
void Uart_set_callback(RXC_callback_t ptr){
	if(ptr !=NULL){
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <Uart_set_callback+0xc>
		RXC_callback_ptr = ptr;
    1d88:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <RXC_callback_ptr+0x1>
    1d8c:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <RXC_callback_ptr>
    1d90:	08 95       	ret

00001d92 <__vector_13>:
	}
}

//ISR of UART
ISR(UART_RX_INT){
    1d92:	1f 92       	push	r1
    1d94:	0f 92       	push	r0
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	0f 92       	push	r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	2f 93       	push	r18
    1d9e:	3f 93       	push	r19
    1da0:	4f 93       	push	r20
    1da2:	5f 93       	push	r21
    1da4:	6f 93       	push	r22
    1da6:	7f 93       	push	r23
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	af 93       	push	r26
    1dae:	bf 93       	push	r27
    1db0:	ef 93       	push	r30
    1db2:	ff 93       	push	r31
	uint8 data;
	data = UDR_REG;
    1db4:	8c b1       	in	r24, 0x0c	; 12
	RXC_callback_ptr(data);
    1db6:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <RXC_callback_ptr>
    1dba:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <RXC_callback_ptr+0x1>
    1dbe:	09 95       	icall
}
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

00001de2 <__udivmodhi4>:
    1de2:	aa 1b       	sub	r26, r26
    1de4:	bb 1b       	sub	r27, r27
    1de6:	51 e1       	ldi	r21, 0x11	; 17
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <__udivmodhi4_ep>

00001dea <__udivmodhi4_loop>:
    1dea:	aa 1f       	adc	r26, r26
    1dec:	bb 1f       	adc	r27, r27
    1dee:	a6 17       	cp	r26, r22
    1df0:	b7 07       	cpc	r27, r23
    1df2:	10 f0       	brcs	.+4      	; 0x1df8 <__udivmodhi4_ep>
    1df4:	a6 1b       	sub	r26, r22
    1df6:	b7 0b       	sbc	r27, r23

00001df8 <__udivmodhi4_ep>:
    1df8:	88 1f       	adc	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	5a 95       	dec	r21
    1dfe:	a9 f7       	brne	.-22     	; 0x1dea <__udivmodhi4_loop>
    1e00:	80 95       	com	r24
    1e02:	90 95       	com	r25
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	08 95       	ret

00001e0a <memcpy>:
    1e0a:	fb 01       	movw	r30, r22
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <memcpy+0xa>
    1e10:	01 90       	ld	r0, Z+
    1e12:	0d 92       	st	X+, r0
    1e14:	41 50       	subi	r20, 0x01	; 1
    1e16:	50 40       	sbci	r21, 0x00	; 0
    1e18:	d8 f7       	brcc	.-10     	; 0x1e10 <memcpy+0x6>
    1e1a:	08 95       	ret

00001e1c <_exit>:
    1e1c:	f8 94       	cli

00001e1e <__stop_program>:
    1e1e:	ff cf       	rjmp	.-2      	; 0x1e1e <__stop_program>
